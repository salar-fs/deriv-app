(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~account-info~~aa387132"],{

/***/ "../../components/lib/money.css":
/*!*******************************************************************************!*\
  !*** /home/salar/projects/binary/deriv-app/packages/components/lib/money.css ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vY29tcG9uZW50cy9saWIvbW9uZXkuY3NzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy9ob21lL3NhbGFyL3Byb2plY3RzL2JpbmFyeS9kZXJpdi1hcHAvcGFja2FnZXMvY29tcG9uZW50cy9saWIvbW9uZXkuY3NzPzllMWUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../components/lib/money.css\n");

/***/ }),

/***/ "../../components/lib/money.js":
/*!******************************************************************************!*\
  !*** /home/salar/projects/binary/deriv-app/packages/components/lib/money.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,n){ true?module.exports=n(__webpack_require__(/*! prop-types */ \"../../components/node_modules/prop-types/index.js\"),__webpack_require__(/*! react */ \"../node_modules/react/index.js\"),__webpack_require__(/*! classnames */ \"../../components/node_modules/classnames/index.js\"),__webpack_require__(/*! react-tiny-popover */ \"../../components/node_modules/react-tiny-popover/dist/Popover.js\"),__webpack_require__(/*! @deriv/shared/utils/currency */ \"../../shared/utils/currency.js\")):undefined}(window,function(__WEBPACK_EXTERNAL_MODULE__0__,__WEBPACK_EXTERNAL_MODULE__1__,__WEBPACK_EXTERNAL_MODULE__2__,__WEBPACK_EXTERNAL_MODULE__8__,__WEBPACK_EXTERNAL_MODULE__16__){return function(e){var n={};function t(I){if(n[I])return n[I].exports;var g=n[I]={i:I,l:!1,exports:{}};return e[I].call(g.exports,g,g.exports,t),g.l=!0,g.exports}return t.m=e,t.c=n,t.d=function(e,n,I){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:I})},t.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&\"object\"==typeof e&&e&&e.__esModule)return e;var I=Object.create(null);if(t.r(I),Object.defineProperty(I,\"default\",{enumerable:!0,value:e}),2&n&&\"string\"!=typeof e)for(var g in e)t.d(I,g,function(n){return e[n]}.bind(null,g));return I},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,\"a\",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p=\"\",t(t.s=54)}({0:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__0__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJwcm9wLXR5cGVzXCI/MzgzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///0\\n\")},1:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__1__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJyZWFjdFwiPzU4OGUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///1\\n\")},14:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n\\n// EXTERNAL MODULE: external \"classnames\"\\nvar external_classnames_ = __webpack_require__(2);\\nvar external_classnames_default = /*#__PURE__*/__webpack_require__.n(external_classnames_);\\n\\n// EXTERNAL MODULE: external \"prop-types\"\\nvar external_prop_types_ = __webpack_require__(0);\\nvar external_prop_types_default = /*#__PURE__*/__webpack_require__.n(external_prop_types_);\\n\\n// EXTERNAL MODULE: external \"react\"\\nvar external_react_ = __webpack_require__(1);\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n\\n// EXTERNAL MODULE: external \"react-tiny-popover\"\\nvar external_react_tiny_popover_ = __webpack_require__(8);\\nvar external_react_tiny_popover_default = /*#__PURE__*/__webpack_require__.n(external_react_tiny_popover_);\\n\\n// EXTERNAL MODULE: ./src/components/icon/index.js + 1 modules\\nvar components_icon = __webpack_require__(3);\\n\\n// CONCATENATED MODULE: ./src/components/popover/popover.jsx\\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn\\'t been initialised - super() hasn\\'t been called\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n\\n\\n\\n\\n\\n\\nvar popover_Popover =\\n/*#__PURE__*/\\nfunction (_React$PureComponent) {\\n  _inherits(Popover, _React$PureComponent);\\n\\n  function Popover(props) {\\n    var _this;\\n\\n    _classCallCheck(this, Popover);\\n\\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Popover).call(this, props));\\n\\n    _this.toggleOpen = function () {\\n      return _this.setState({\\n        is_open: Boolean(_this.props.message)\\n      });\\n    };\\n\\n    _this.toggleClose = function () {\\n      return _this.setState({\\n        is_open: false\\n      });\\n    };\\n\\n    _this.state = {\\n      is_open: false\\n    };\\n    return _this;\\n  }\\n\\n  _createClass(Popover, [{\\n    key: \"componentDidMount\",\\n    value: function componentDidMount() {\\n      this.setState({\\n        is_open: this.props.has_error\\n      });\\n    }\\n  }, {\\n    key: \"render\",\\n    value: function render() {\\n      var _this$props = this.props,\\n          alignment = _this$props.alignment,\\n          children = _this$props.children,\\n          className = _this$props.className,\\n          classNameBubble = _this$props.classNameBubble,\\n          classNameTarget = _this$props.classNameTarget,\\n          classNameTargetIcon = _this$props.classNameTargetIcon,\\n          counter = _this$props.counter,\\n          disable_message_icon = _this$props.disable_message_icon,\\n          disable_target_icon = _this$props.disable_target_icon,\\n          has_error = _this$props.has_error,\\n          icon = _this$props.icon,\\n          id = _this$props.id,\\n          is_open = _this$props.is_open,\\n          margin = _this$props.margin,\\n          message = _this$props.message,\\n          zIndex = _this$props.zIndex;\\n      var has_external_open_state = is_open !== undefined;\\n      var icon_class_name = external_classnames_default()(classNameTargetIcon, icon);\\n      return external_react_default.a.createElement(external_react_tiny_popover_default.a, {\\n        isOpen: has_external_open_state ? is_open : this.state.is_open,\\n        position: alignment,\\n        transitionDuration: 0.25,\\n        padding: margin + 8,\\n        containerStyle: {\\n          zIndex: zIndex || 1\\n        },\\n        content: function content(_ref) {\\n          var position = _ref.position,\\n              targetRect = _ref.targetRect,\\n              popoverRect = _ref.popoverRect;\\n          return external_react_default.a.createElement(external_react_tiny_popover_[\"ArrowContainer\"], {\\n            position: position,\\n            targetRect: targetRect,\\n            popoverRect: popoverRect,\\n            arrowColor: has_error ? \\'var(--status-danger)\\' : \\'var(--general-active)\\',\\n            arrowSize: 5\\n          }, external_react_default.a.createElement(\"div\", {\\n            id: id,\\n            className: external_classnames_default()(classNameBubble, \\'dc-popover__bubble\\', {\\n              \\'dc-popover__bubble--error\\': has_error\\n            })\\n          }, !disable_message_icon && icon === \\'info\\' && external_react_default.a.createElement(\"i\", {\\n            className: \"dc-popover__bubble__icon\"\\n          }, external_react_default.a.createElement(components_icon[\"default\"], {\\n            icon: \"IcInfoBlue\"\\n          })), external_react_default.a.createElement(\"span\", {\\n            className: external_classnames_default()(\\'dc-popover__bubble__text\\', {\\n              \\'dc-popover__bubble__text--error\\': has_error\\n            })\\n          }, message)));\\n        }\\n      }, external_react_default.a.createElement(\"div\", {\\n        className: external_classnames_default()(\\'dc-popover\\', className),\\n        id: id,\\n        onMouseEnter: has_external_open_state ? undefined : this.toggleOpen,\\n        onMouseLeave: has_external_open_state ? undefined : this.toggleClose\\n      }, external_react_default.a.createElement(\"div\", {\\n        className: external_classnames_default()(classNameTarget, \\'dc-popover__target\\')\\n      }, !disable_target_icon && external_react_default.a.createElement(\"i\", {\\n        className: message ? \\'dc-popover__target__icon\\' : \\'dc-popover__target__icon--disabled\\'\\n      }, icon === \\'info\\' && external_react_default.a.createElement(components_icon[\"default\"], {\\n        icon: \"IcInfoOutline\",\\n        className: icon_class_name\\n      }), icon === \\'question\\' && external_react_default.a.createElement(components_icon[\"default\"], {\\n        icon: \"IcUnknown\",\\n        className: icon_class_name\\n      }), icon === \\'dot\\' && external_react_default.a.createElement(components_icon[\"default\"], {\\n        icon: \"IcCircle\",\\n        className: icon_class_name,\\n        size: 4\\n      }), icon === \\'counter\\' && external_react_default.a.createElement(\"span\", {\\n        className: icon_class_name\\n      }, counter)), children)));\\n    }\\n  }]);\\n\\n  return Popover;\\n}(external_react_default.a.PureComponent);\\n\\npopover_Popover.defaultProps = {\\n  portal_container: \\'deriv_app\\',\\n  margin: 0\\n};\\npopover_Popover.propTypes = {\\n  alignment: external_prop_types_default.a.string,\\n  children: external_prop_types_default.a.node,\\n  className: external_prop_types_default.a.string,\\n  classNameBubble: external_prop_types_default.a.string,\\n  classNameTarget: external_prop_types_default.a.string,\\n  classNameTargetIcon: external_prop_types_default.a.string,\\n  counter: external_prop_types_default.a.number,\\n  disable_message_icon: external_prop_types_default.a.bool,\\n  disable_target_icon: external_prop_types_default.a.bool,\\n  has_error: external_prop_types_default.a.bool,\\n  icon: external_prop_types_default.a.oneOf([\\'info\\', \\'question\\', \\'dot\\', \\'counter\\']),\\n  id: external_prop_types_default.a.string,\\n  is_open: external_prop_types_default.a.bool,\\n  margin: external_prop_types_default.a.number,\\n  message: external_prop_types_default.a.oneOfType([external_prop_types_default.a.string, external_prop_types_default.a.object]),\\n  portal_container: external_prop_types_default.a.string,\\n  zIndex: external_prop_types_default.a.number\\n};\\n/* harmony default export */ var popover = (popover_Popover);\\n// EXTERNAL MODULE: ./src/components/popover/popover.scss\\nvar popover_popover = __webpack_require__(19);\\n\\n// CONCATENATED MODULE: ./src/components/popover/index.js\\n\\n\\n/* harmony default export */ var components_popover = __webpack_exports__[\"default\"] = (popover);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///14\\n')},16:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__16__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50L2V4dGVybmFsIFwiQGRlcml2L3NoYXJlZC91dGlscy9jdXJyZW5jeVwiP2ViZmIiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xNl9fOyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///16\\n\")},19:function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvcG9wb3Zlci9wb3BvdmVyLnNjc3M/ZWVkNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICAvLyAxNTgwODAyMDQyMjc0XG4gICAgICB2YXIgY3NzUmVsb2FkID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWhvdC1sb2FkZXIvaG90TW9kdWxlUmVwbGFjZW1lbnQuanNcIikobW9kdWxlLmlkLCB7XCJmaWxlTWFwXCI6XCJ7ZmlsZU5hbWV9XCJ9KTtcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShjc3NSZWxvYWQpO1xuICAgICAgbW9kdWxlLmhvdC5hY2NlcHQodW5kZWZpbmVkLCBjc3NSZWxvYWQpOztcbiAgICB9XG4gICJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxnQ0FLQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///19\\n\")},2:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__2__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJjbGFzc25hbWVzXCI/YWFhYiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzJfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///2\\n\")},3:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval(\"__webpack_require__.r(__webpack_exports__);\\n\\n// EXTERNAL MODULE: external \\\"classnames\\\"\\nvar external_classnames_ = __webpack_require__(2);\\nvar external_classnames_default = /*#__PURE__*/__webpack_require__.n(external_classnames_);\\n\\n// EXTERNAL MODULE: external \\\"prop-types\\\"\\nvar external_prop_types_ = __webpack_require__(0);\\nvar external_prop_types_default = /*#__PURE__*/__webpack_require__.n(external_prop_types_);\\n\\n// EXTERNAL MODULE: external \\\"react\\\"\\nvar external_react_ = __webpack_require__(1);\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n\\n// CONCATENATED MODULE: ./src/components/icon/icon.jsx\\n\\n\\n // TODO: [move-to-shared]\\n\\nvar getUrlBase = function getUrlBase() {\\n  var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\\n  var l = window.location;\\n  if (!/^\\\\/(br_)/.test(l.pathname)) return path;\\n  return \\\"/\\\".concat(l.pathname.split('/')[1]).concat(/^\\\\//.test(path) ? path : \\\"/\\\".concat(path));\\n}; // TODO: [move-to-shared]\\n\\n\\nvar getKebabCase = function getKebabCase(str) {\\n  if (!str) return str;\\n  return str.replace(/([a-z0-9])([A-Z])/g, '$1-$2') // get all lowercase letters that are near to uppercase ones\\n  .replace(/[\\\\s]+/g, '-') // replace all spaces and low dash\\n  .toLowerCase();\\n};\\n\\nvar icon_Icon = function Icon(_ref) {\\n  var className = _ref.className,\\n      color = _ref.color,\\n      custom_color = _ref.custom_color,\\n      height = _ref.height,\\n      icon = _ref.icon,\\n      onClick = _ref.onClick,\\n      onMouseEnter = _ref.onMouseEnter,\\n      onMouseLeave = _ref.onMouseLeave,\\n      _ref$size = _ref.size,\\n      size = _ref$size === void 0 ? 16 : _ref$size,\\n      width = _ref.width;\\n  if (!icon) return null;\\n  var filename = 'common';\\n  var filenames = /^Ic(Currency|Tradetype|Mt5|Flag|Underlying)/g.exec(icon);\\n\\n  if (filenames) {\\n    filename = getKebabCase(filenames[1]);\\n  }\\n\\n  var id = icon.startsWith('IcUnderlying') ? \\\"ic-underlying-\\\".concat(icon.split('IcUnderlying')[1].toUpperCase()) : getKebabCase(icon);\\n  return external_react_default.a.createElement(\\\"svg\\\", {\\n    xmlns: \\\"http://www.w3.org/2000/svg\\\",\\n    xmlnsXlink: \\\"http://www.w3.org/1999/xlink\\\",\\n    className: external_classnames_default()('dc-icon', className, {\\n      'dc-icon--active': color === 'active',\\n      'dc-icon--disabled': color === 'disabled',\\n      'dc-icon--green': color === 'green' || icon === 'IcProfit',\\n      'dc-icon--red': color === 'red' || icon === 'IcLoss',\\n      'dc-icon--secondary': color === 'secondary',\\n      'dc-icon--brand': color === 'brand'\\n    }),\\n    height: height || size,\\n    width: width || size,\\n    onClick: onClick,\\n    onMouseEnter: onMouseEnter,\\n    onMouseLeave: onMouseLeave,\\n    style: custom_color ? {\\n      '--fill-color1': custom_color\\n    } : undefined\\n  }, external_react_default.a.createElement(\\\"use\\\", {\\n    xlinkHref: \\\"\\\".concat(getUrlBase(\\\"/public/images/sprite/\\\".concat(filename, \\\".svg\\\")), \\\"#\\\").concat(id)\\n  }));\\n};\\n\\nicon_Icon.propTypes = {\\n  className: external_prop_types_default.a.oneOfType([external_prop_types_default.a.object, external_prop_types_default.a.string]),\\n  color: external_prop_types_default.a.oneOfType([external_prop_types_default.a.bool, external_prop_types_default.a.string]),\\n  custom_color: external_prop_types_default.a.string,\\n  height: external_prop_types_default.a.oneOfType([external_prop_types_default.a.number, external_prop_types_default.a.string]),\\n  icon: external_prop_types_default.a.string,\\n  onClick: external_prop_types_default.a.func,\\n  onMouseEnter: external_prop_types_default.a.func,\\n  onMouseLeave: external_prop_types_default.a.func,\\n  size: external_prop_types_default.a.oneOfType([external_prop_types_default.a.number, external_prop_types_default.a.string]),\\n  width: external_prop_types_default.a.oneOfType([external_prop_types_default.a.number, external_prop_types_default.a.string])\\n};\\n/* harmony default export */ var icon_icon = (icon_Icon);\\n// EXTERNAL MODULE: ./src/components/icon/icon.scss\\nvar components_icon_icon = __webpack_require__(4);\\n\\n// CONCATENATED MODULE: ./src/components/icon/index.js\\n\\n\\n/* harmony default export */ var components_icon = __webpack_exports__[\\\"default\\\"] = (icon_icon);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvLi9zcmMvY29tcG9uZW50cy9pY29uL2ljb24uanN4PzJhYTMiLCJ3ZWJwYWNrOi8vQGRlcml2L2NvbXBvbmVudC8uL3NyYy9jb21wb25lbnRzL2ljb24vaW5kZXguanM/YWU2MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0ICAgICAgZnJvbSAncmVhY3QnO1xuXG4vLyBUT0RPOiBbbW92ZS10by1zaGFyZWRdXG5jb25zdCBnZXRVcmxCYXNlID0gKHBhdGggPSAnJykgPT4ge1xuICAgIGNvbnN0IGwgPSB3aW5kb3cubG9jYXRpb247XG5cbiAgICBpZiAoIS9eXFwvKGJyXykvLnRlc3QobC5wYXRobmFtZSkpIHJldHVybiBwYXRoO1xuXG4gICAgcmV0dXJuIGAvJHtsLnBhdGhuYW1lLnNwbGl0KCcvJylbMV19JHsvXlxcLy8udGVzdChwYXRoKSA/IHBhdGggOiBgLyR7cGF0aH1gfWA7XG59O1xuXG4vLyBUT0RPOiBbbW92ZS10by1zaGFyZWRdXG5jb25zdCBnZXRLZWJhYkNhc2UgPSAoc3RyKSA9PiB7XG4gICAgaWYgKCFzdHIpIHJldHVybiBzdHI7XG4gICAgcmV0dXJuIHN0clxuICAgICAgICAucmVwbGFjZSgvKFthLXowLTldKShbQS1aXSkvZywgJyQxLSQyJykgLy8gZ2V0IGFsbCBsb3dlcmNhc2UgbGV0dGVycyB0aGF0IGFyZSBuZWFyIHRvIHVwcGVyY2FzZSBvbmVzXG4gICAgICAgIC5yZXBsYWNlKC9bXFxzXSsvZywgJy0nKSAgICAgICAgICAgICAgICAgLy8gcmVwbGFjZSBhbGwgc3BhY2VzIGFuZCBsb3cgZGFzaFxuICAgICAgICAudG9Mb3dlckNhc2UoKTtcbn07XG5cbmNvbnN0IEljb24gPSAoe1xuICAgIGNsYXNzTmFtZSxcbiAgICBjb2xvcixcbiAgICBjdXN0b21fY29sb3IsXG4gICAgaGVpZ2h0LFxuICAgIGljb24sXG4gICAgb25DbGljayxcbiAgICBvbk1vdXNlRW50ZXIsXG4gICAgb25Nb3VzZUxlYXZlLFxuICAgIHNpemUgPSAxNixcbiAgICB3aWR0aCxcbn0pID0+IHtcbiAgICBpZiAoIWljb24pIHJldHVybiBudWxsO1xuXG4gICAgbGV0IGZpbGVuYW1lID0gJ2NvbW1vbic7XG4gICAgY29uc3QgZmlsZW5hbWVzID0gL15JYyhDdXJyZW5jeXxUcmFkZXR5cGV8TXQ1fEZsYWd8VW5kZXJseWluZykvZy5leGVjKGljb24pO1xuICAgIGlmIChmaWxlbmFtZXMpIHtcbiAgICAgICAgZmlsZW5hbWUgPSBnZXRLZWJhYkNhc2UoZmlsZW5hbWVzWzFdKTtcbiAgICB9XG5cbiAgICBjb25zdCBpZCA9IGljb24uc3RhcnRzV2l0aCgnSWNVbmRlcmx5aW5nJykgPyBgaWMtdW5kZXJseWluZy0ke2ljb24uc3BsaXQoJ0ljVW5kZXJseWluZycpWzFdLnRvVXBwZXJDYXNlKCl9YCA6IGdldEtlYmFiQ2FzZShpY29uKTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxzdmdcbiAgICAgICAgICAgIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZydcbiAgICAgICAgICAgIHhtbG5zWGxpbms9J2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnXG4gICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ2RjLWljb24nLCBjbGFzc05hbWUsIHtcbiAgICAgICAgICAgICAgICAnZGMtaWNvbi0tYWN0aXZlJyAgIDogY29sb3IgPT09ICdhY3RpdmUnLFxuICAgICAgICAgICAgICAgICdkYy1pY29uLS1kaXNhYmxlZCcgOiBjb2xvciA9PT0gJ2Rpc2FibGVkJyxcbiAgICAgICAgICAgICAgICAnZGMtaWNvbi0tZ3JlZW4nICAgIDogY29sb3IgPT09ICdncmVlbicgfHwgaWNvbiA9PT0gJ0ljUHJvZml0JyxcbiAgICAgICAgICAgICAgICAnZGMtaWNvbi0tcmVkJyAgICAgIDogY29sb3IgPT09ICdyZWQnIHx8IGljb24gPT09ICdJY0xvc3MnLFxuICAgICAgICAgICAgICAgICdkYy1pY29uLS1zZWNvbmRhcnknOiBjb2xvciA9PT0gJ3NlY29uZGFyeScsXG4gICAgICAgICAgICAgICAgJ2RjLWljb24tLWJyYW5kJyAgICA6IGNvbG9yID09PSAnYnJhbmQnLFxuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICBoZWlnaHQ9e2hlaWdodCB8fCBzaXplfVxuICAgICAgICAgICAgd2lkdGg9e3dpZHRoIHx8IHNpemV9XG4gICAgICAgICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgICAgICAgICAgb25Nb3VzZUVudGVyPXtvbk1vdXNlRW50ZXJ9XG4gICAgICAgICAgICBvbk1vdXNlTGVhdmU9e29uTW91c2VMZWF2ZX1cbiAgICAgICAgICAgIHN0eWxlPXtjdXN0b21fY29sb3IgPyB7XG4gICAgICAgICAgICAgICAgJy0tZmlsbC1jb2xvcjEnOiBjdXN0b21fY29sb3IsXG4gICAgICAgICAgICB9IDogdW5kZWZpbmVkfVxuICAgICAgICA+XG4gICAgICAgICAgICA8dXNlIHhsaW5rSHJlZj17YCR7KGdldFVybEJhc2UoYC9wdWJsaWMvaW1hZ2VzL3Nwcml0ZS8ke2ZpbGVuYW1lfS5zdmdgKSl9IyR7aWR9YH0gLz5cbiAgICAgICAgPC9zdmc+XG4gICAgKTtcbn07XG5cbkljb24ucHJvcFR5cGVzID0ge1xuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICAgIFByb3BUeXBlcy5vYmplY3QsXG4gICAgICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgXSksXG4gICAgY29sb3I6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICBQcm9wVHlwZXMuYm9vbCxcbiAgICAgICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICBdKSxcbiAgICBjdXN0b21fY29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgaGVpZ2h0ICAgICAgOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgICAgUHJvcFR5cGVzLm51bWJlcixcbiAgICAgICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICBdKSxcbiAgICBpY29uICAgICAgICA6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgb25DbGljayAgICAgOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvbk1vdXNlRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uTW91c2VMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2l6ZSAgICAgICAgOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgICAgUHJvcFR5cGVzLm51bWJlcixcbiAgICAgICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICBdKSxcbiAgICB3aWR0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICAgIFByb3BUeXBlcy5udW1iZXIsXG4gICAgICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgXSksXG59O1xuXG5leHBvcnQgZGVmYXVsdCBJY29uO1xuIiwiaW1wb3J0IEljb24gZnJvbSAnLi9pY29uLmpzeCc7XG5pbXBvcnQgICAgICAgICAgICAnLi9pY29uLnNjc3MnO1xuXG5leHBvcnQgZGVmYXVsdCBJY29uO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBSUE7QUFDQTtBQUNBO0FBV0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTkE7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBaEJBO0FBb0JBO0FBQUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBSUE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQXRCQTtBQTRCQTs7Ozs7QUNsR0E7QUFDQTtBQUVBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///3\\n\")},4:function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvLi9zcmMvY29tcG9uZW50cy9pY29uL2ljb24uc2Nzcz83YjFhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE1ODA4MDIwNDI1MDVcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtaG90LWxvYWRlci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcImZpbGVNYXBcIjpcIntmaWxlTmFtZX1cIn0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBtb2R1bGUuaG90LmFjY2VwdCh1bmRlZmluZWQsIGNzc1JlbG9hZCk7O1xuICAgIH1cbiAgIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGdDQUtBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///4\\n\")},40:function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvY3J5cHRvLW1vbmV5L2NyeXB0by1tb25leS5zY3NzP2I1OWEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTU4MDgwMjA0MjYzMFxuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1ob3QtbG9hZGVyL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wiZmlsZU1hcFwiOlwie2ZpbGVOYW1lfVwifSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KHVuZGVmaW5lZCwgY3NzUmVsb2FkKTs7XG4gICAgfVxuICAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsZ0NBS0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///40\\n\")},41:function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvbW9uZXkvbW9uZXkuc2Nzcz9jZjE5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE1ODA4MDIwNDIwNDRcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtaG90LWxvYWRlci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcImZpbGVNYXBcIjpcIntmaWxlTmFtZX1cIn0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBtb2R1bGUuaG90LmFjY2VwdCh1bmRlZmluZWQsIGNzc1JlbG9hZCk7O1xuICAgIH1cbiAgIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGdDQUtBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///41\\n\")},54:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n\\n// EXTERNAL MODULE: external \"classnames\"\\nvar external_classnames_ = __webpack_require__(2);\\nvar external_classnames_default = /*#__PURE__*/__webpack_require__.n(external_classnames_);\\n\\n// EXTERNAL MODULE: external \"prop-types\"\\nvar external_prop_types_ = __webpack_require__(0);\\nvar external_prop_types_default = /*#__PURE__*/__webpack_require__.n(external_prop_types_);\\n\\n// EXTERNAL MODULE: external \"react\"\\nvar external_react_ = __webpack_require__(1);\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n\\n// EXTERNAL MODULE: external \"@deriv/shared/utils/currency\"\\nvar currency_ = __webpack_require__(16);\\nvar currency_default = /*#__PURE__*/__webpack_require__.n(currency_);\\n\\n// EXTERNAL MODULE: ./src/components/popover/index.js + 1 modules\\nvar popover = __webpack_require__(14);\\n\\n// CONCATENATED MODULE: ./src/components/crypto-money/crypto-money.jsx\\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\\n\\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\\n\\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\\n\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\n\\n\\n\\n\\n\\nvar crypto_money_CryptoMoney = function CryptoMoney(_ref) {\\n  var realValue = _ref.realValue,\\n      toggleValue = _ref.toggleValue;\\n\\n  var _useState = Object(external_react_[\"useState\"])(false),\\n      _useState2 = _slicedToArray(_useState, 2),\\n      cryptoToggleView = _useState2[0],\\n      setCryptoToggleView = _useState2[1];\\n\\n  return external_react_default.a.createElement(external_react_default.a.Fragment, null, external_react_default.a.createElement(popover[\"default\"], {\\n    alignment: \"top\",\\n    className: \"crypto-popover\",\\n    message: realValue,\\n    is_open: cryptoToggleView,\\n    disable_target_icon: true\\n  }, external_react_default.a.createElement(\"span\", {\\n    onMouseEnter: function onMouseEnter() {\\n      return setCryptoToggleView(true);\\n    },\\n    onMouseLeave: function onMouseLeave() {\\n      return setCryptoToggleView(false);\\n    }\\n  }, toggleValue)));\\n};\\n\\ncrypto_money_CryptoMoney.propTypes = {\\n  realValue: external_prop_types_default.a.string,\\n  toggleValue: external_prop_types_default.a.string\\n};\\n/* harmony default export */ var crypto_money = (crypto_money_CryptoMoney);\\n// EXTERNAL MODULE: ./src/components/crypto-money/crypto-money.scss\\nvar crypto_money_crypto_money = __webpack_require__(40);\\n\\n// CONCATENATED MODULE: ./src/components/crypto-money/index.js\\n\\n\\n/* harmony default export */ var components_crypto_money = (crypto_money);\\n// CONCATENATED MODULE: ./src/components/money/money.jsx\\n\\n\\n\\n\\n\\n\\nvar money_Money = function Money(_ref) {\\n  var amount = _ref.amount,\\n      className = _ref.className,\\n      _ref$currency = _ref.currency,\\n      currency = _ref$currency === void 0 ? \\'USD\\' : _ref$currency,\\n      has_sign = _ref.has_sign,\\n      _ref$should_format = _ref.should_format,\\n      should_format = _ref$should_format === void 0 ? true : _ref$should_format;\\n  var sign = \\'\\';\\n\\n  if (+amount && (amount < 0 || has_sign)) {\\n    sign = amount > 0 ? \\'+\\' : \\'-\\';\\n  } // if it\\'s formatted already then don\\'t make any changes unless we should remove extra -/+ signs\\n\\n\\n  var value = has_sign || should_format ? Math.abs(amount) : amount;\\n  var decimalPart = currency_default.a.getDecimalPart(amount);\\n  var needsCryptoToggle = currency_default.a.isCryptocurrency(currency) && decimalPart && decimalPart.length > currency_default.a.getDecimalPlaces(currency);\\n  var final_amount = null;\\n\\n  if (needsCryptoToggle) {\\n    final_amount = currency_default.a.getCryptoFormat(value);\\n  } else {\\n    final_amount = should_format ? currency_default.a.formatMoney(currency, value, true) : value;\\n  }\\n\\n  return external_react_default.a.createElement(external_react_default.a.Fragment, null, has_sign && sign, external_react_default.a.createElement(\"span\", {\\n    className: external_classnames_default()(className, \\'symbols\\', \"symbols--\".concat(currency.toLowerCase()))\\n  }), needsCryptoToggle ? external_react_default.a.createElement(components_crypto_money, final_amount) : final_amount);\\n};\\n\\nmoney_Money.propTypes = {\\n  amount: external_prop_types_default.a.oneOfType([external_prop_types_default.a.number, external_prop_types_default.a.string]),\\n  className: external_prop_types_default.a.string,\\n  currency: external_prop_types_default.a.string,\\n  has_sign: external_prop_types_default.a.bool,\\n  should_format: external_prop_types_default.a.bool\\n};\\n/* harmony default export */ var money = (money_Money);\\n// EXTERNAL MODULE: ./src/components/money/money.scss\\nvar money_money = __webpack_require__(41);\\n\\n// CONCATENATED MODULE: ./src/components/money/index.js\\n\\n\\n/* harmony default export */ var components_money = __webpack_exports__[\"default\"] = (money);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvY3J5cHRvLW1vbmV5L2NyeXB0by1tb25leS5qc3g/NDdkMSIsIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvY3J5cHRvLW1vbmV5L2luZGV4LmpzPzI2YjkiLCJ3ZWJwYWNrOi8vQGRlcml2L2NvbXBvbmVudC8uL3NyYy9jb21wb25lbnRzL21vbmV5L21vbmV5LmpzeD9kMmJmIiwid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvLi9zcmMvY29tcG9uZW50cy9tb25leS9pbmRleC5qcz9lMjA5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUG9wb3ZlciBmcm9tICcuLi9wb3BvdmVyJztcblxuY29uc3QgQ3J5cHRvTW9uZXkgPSAoe1xuICAgIHJlYWxWYWx1ZSxcbiAgICB0b2dnbGVWYWx1ZSxcbn0pID0+IHtcbiAgICBcbiAgICBjb25zdCBbY3J5cHRvVG9nZ2xlVmlldywgc2V0Q3J5cHRvVG9nZ2xlVmlld10gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8PlxuICAgICAgICAgICAgPFBvcG92ZXJcbiAgICAgICAgICAgICAgICBhbGlnbm1lbnQ9J3RvcCdcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9J2NyeXB0by1wb3BvdmVyJ1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U9e3JlYWxWYWx1ZX1cbiAgICAgICAgICAgICAgICBpc19vcGVuPXtjcnlwdG9Ub2dnbGVWaWV3fVxuICAgICAgICAgICAgICAgIGRpc2FibGVfdGFyZ2V0X2ljb25cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8c3BhbiBvbk1vdXNlRW50ZXI9eygpID0+IHNldENyeXB0b1RvZ2dsZVZpZXcodHJ1ZSl9IG9uTW91c2VMZWF2ZT17KCkgPT4gc2V0Q3J5cHRvVG9nZ2xlVmlldyhmYWxzZSl9PlxuICAgICAgICAgICAgICAgICAgICB7dG9nZ2xlVmFsdWV9XG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9Qb3BvdmVyPlxuICAgICAgICA8Lz5cbiAgICApO1xufTtcblxuQ3J5cHRvTW9uZXkucHJvcFR5cGVzID0ge1xuICAgIHJlYWxWYWx1ZSAgOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvZ2dsZVZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ3J5cHRvTW9uZXk7XG4iLCJpbXBvcnQgQ3J5cHRvTW9uZXkgZnJvbSAnLi9jcnlwdG8tbW9uZXkuanN4JztcbmltcG9ydCAgICAgICAgICAgICAgICAgICcuL2NyeXB0by1tb25leS5zY3NzJztcblxuZXhwb3J0IGRlZmF1bHQgQ3J5cHRvTW9uZXk7XG4iLCJpbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEN1cnJlbmN5VXRpbHMgZnJvbSAnQGRlcml2L3NoYXJlZC91dGlscy9jdXJyZW5jeSc7XG5pbXBvcnQgQ3J5cHRvTW9uZXkgZnJvbSAnLi4vY3J5cHRvLW1vbmV5JztcblxuY29uc3QgTW9uZXkgPSAoe1xuICAgIGFtb3VudCxcbiAgICBjbGFzc05hbWUsXG4gICAgY3VycmVuY3kgPSAnVVNEJyxcbiAgICBoYXNfc2lnbixcbiAgICBzaG91bGRfZm9ybWF0ID0gdHJ1ZSxcbn0pID0+IHtcbiAgICBsZXQgc2lnbiA9ICcnO1xuICAgIGlmICgrYW1vdW50ICYmIChhbW91bnQgPCAwIHx8IGhhc19zaWduKSkge1xuICAgICAgICBzaWduID0gYW1vdW50ID4gMCA/ICcrJyA6ICctJztcbiAgICB9XG5cbiAgICAvLyBpZiBpdCdzIGZvcm1hdHRlZCBhbHJlYWR5IHRoZW4gZG9uJ3QgbWFrZSBhbnkgY2hhbmdlcyB1bmxlc3Mgd2Ugc2hvdWxkIHJlbW92ZSBleHRyYSAtLysgc2lnbnNcbiAgICBjb25zdCB2YWx1ZSA9IChoYXNfc2lnbiB8fCBzaG91bGRfZm9ybWF0KSA/IE1hdGguYWJzKGFtb3VudCkgOiBhbW91bnQ7XG4gICAgY29uc3QgZGVjaW1hbFBhcnQgPSBDdXJyZW5jeVV0aWxzLmdldERlY2ltYWxQYXJ0KGFtb3VudCk7XG4gICAgY29uc3QgbmVlZHNDcnlwdG9Ub2dnbGUgPSBDdXJyZW5jeVV0aWxzLmlzQ3J5cHRvY3VycmVuY3koY3VycmVuY3kpICYmXG4gICAgICAgIChkZWNpbWFsUGFydCAmJiBkZWNpbWFsUGFydC5sZW5ndGggPiBDdXJyZW5jeVV0aWxzLmdldERlY2ltYWxQbGFjZXMoY3VycmVuY3kpKTtcbiAgICBsZXQgZmluYWxfYW1vdW50ID0gbnVsbDtcbiAgICBpZiAobmVlZHNDcnlwdG9Ub2dnbGUpIHtcbiAgICAgICAgZmluYWxfYW1vdW50ID0gQ3VycmVuY3lVdGlscy5nZXRDcnlwdG9Gb3JtYXQodmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZpbmFsX2Ftb3VudCA9IHNob3VsZF9mb3JtYXQgPyBDdXJyZW5jeVV0aWxzLmZvcm1hdE1vbmV5KGN1cnJlbmN5LCB2YWx1ZSwgdHJ1ZSkgOiB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICAge2hhc19zaWduICYmIHNpZ259XG4gICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyhjbGFzc05hbWUsICdzeW1ib2xzJywgYHN5bWJvbHMtLSR7Y3VycmVuY3kudG9Mb3dlckNhc2UoKX1gKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7bmVlZHNDcnlwdG9Ub2dnbGUgPyA8Q3J5cHRvTW9uZXkgey4uLmZpbmFsX2Ftb3VudH0gLz4gOiBmaW5hbF9hbW91bnR9XG4gICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgKTtcbn07XG5cbk1vbmV5LnByb3BUeXBlcyA9IHtcbiAgICBhbW91bnQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICBQcm9wVHlwZXMubnVtYmVyLFxuICAgICAgICBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIF0pLFxuICAgIGNsYXNzTmFtZSAgICA6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY3VycmVuY3kgICAgIDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBoYXNfc2lnbiAgICAgOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzaG91bGRfZm9ybWF0OiBQcm9wVHlwZXMuYm9vbCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1vbmV5O1xuIiwiaW1wb3J0IE1vbmV5IGZyb20gJy4vbW9uZXkuanN4JztcbmltcG9ydCAgICAgICAgICAgICcuL21vbmV5LnNjc3MnO1xuXG5leHBvcnQgZGVmYXVsdCBNb25leTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFHQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQU9BO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBS0E7Ozs7O0FDakNBO0FBQ0E7QUFFQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU1BO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFJQTtBQURBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQVJBO0FBV0E7Ozs7O0FDbkRBO0FBQ0E7QUFFQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///54\\n')},8:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__8__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJyZWFjdC10aW55LXBvcG92ZXJcIj83NDExIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fOF9fOyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///8\\n\")}}).default});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vY29tcG9uZW50cy9saWIvbW9uZXkuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvc2FsYXIvcHJvamVjdHMvYmluYXJ5L2Rlcml2LWFwcC9wYWNrYWdlcy9jb21wb25lbnRzL2xpYi9tb25leS5qcz9iMTJjIl0sInNvdXJjZXNDb250ZW50IjpbIiFmdW5jdGlvbihlLG4pe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPW4ocmVxdWlyZShcInByb3AtdHlwZXNcIikscmVxdWlyZShcInJlYWN0XCIpLHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpLHJlcXVpcmUoXCJyZWFjdC10aW55LXBvcG92ZXJcIikscmVxdWlyZShcIkBkZXJpdi9zaGFyZWQvdXRpbHMvY3VycmVuY3lcIikpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wicHJvcC10eXBlc1wiLFwicmVhY3RcIixcImNsYXNzbmFtZXNcIixcInJlYWN0LXRpbnktcG9wb3ZlclwiLFwiQGRlcml2L3NoYXJlZC91dGlscy9jdXJyZW5jeVwiXSxuKTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzW1wiQGRlcml2L2NvbXBvbmVudFwiXT1uKHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpLHJlcXVpcmUoXCJyZWFjdFwiKSxyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSxyZXF1aXJlKFwicmVhY3QtdGlueS1wb3BvdmVyXCIpLHJlcXVpcmUoXCJAZGVyaXYvc2hhcmVkL3V0aWxzL2N1cnJlbmN5XCIpKTplW1wiQGRlcml2L2NvbXBvbmVudFwiXT1uKGVbXCJwcm9wLXR5cGVzXCJdLGUucmVhY3QsZS5jbGFzc25hbWVzLGVbXCJyZWFjdC10aW55LXBvcG92ZXJcIl0sZVtcIkBkZXJpdi9zaGFyZWQvdXRpbHMvY3VycmVuY3lcIl0pfSh3aW5kb3csZnVuY3Rpb24oX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMF9fLF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzFfXyxfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18yX18sX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fOF9fLF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzE2X18pe3JldHVybiBmdW5jdGlvbihlKXt2YXIgbj17fTtmdW5jdGlvbiB0KEkpe2lmKG5bSV0pcmV0dXJuIG5bSV0uZXhwb3J0czt2YXIgZz1uW0ldPXtpOkksbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gZVtJXS5jYWxsKGcuZXhwb3J0cyxnLGcuZXhwb3J0cyx0KSxnLmw9ITAsZy5leHBvcnRzfXJldHVybiB0Lm09ZSx0LmM9bix0LmQ9ZnVuY3Rpb24oZSxuLEkpe3QubyhlLG4pfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLHtlbnVtZXJhYmxlOiEwLGdldDpJfSl9LHQucj1mdW5jdGlvbihlKXtcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSx0LnQ9ZnVuY3Rpb24oZSxuKXtpZigxJm4mJihlPXQoZSkpLDgmbilyZXR1cm4gZTtpZig0Jm4mJlwib2JqZWN0XCI9PXR5cGVvZiBlJiZlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIEk9T2JqZWN0LmNyZWF0ZShudWxsKTtpZih0LnIoSSksT2JqZWN0LmRlZmluZVByb3BlcnR5KEksXCJkZWZhdWx0XCIse2VudW1lcmFibGU6ITAsdmFsdWU6ZX0pLDImbiYmXCJzdHJpbmdcIiE9dHlwZW9mIGUpZm9yKHZhciBnIGluIGUpdC5kKEksZyxmdW5jdGlvbihuKXtyZXR1cm4gZVtuXX0uYmluZChudWxsLGcpKTtyZXR1cm4gSX0sdC5uPWZ1bmN0aW9uKGUpe3ZhciBuPWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiB0LmQobixcImFcIixuKSxufSx0Lm89ZnVuY3Rpb24oZSxuKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbil9LHQucD1cIlwiLHQodC5zPTU0KX0oezA6ZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMpe2V2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXzsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNQzVxY3lJc0luTnZkWEpqWlhNaU9sc2lkMlZpY0dGamF6b3ZMMEJrWlhKcGRpOWpiMjF3YjI1bGJuUXZaWGgwWlhKdVlXd2dYQ0p3Y205d0xYUjVjR1Z6WENJL016Z3pNaUpkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUY5ZlYwVkNVRUZEUzE5RldGUkZVazVCVEY5TlQwUlZURVZmWHpCZlh6c2lYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vMFxcblwiKX0sMTpmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyl7ZXZhbChcIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMV9fOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1TNXFjeUlzSW5OdmRYSmpaWE1pT2xzaWQyVmljR0ZqYXpvdkwwQmtaWEpwZGk5amIyMXdiMjVsYm5RdlpYaDBaWEp1WVd3Z1hDSnlaV0ZqZEZ3aVB6VTRPR1VpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCZlgxZEZRbEJCUTB0ZlJWaFVSVkpPUVV4ZlRVOUVWVXhGWDE4eFgxODdJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU0lzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzFcXG5cIil9LDE0OmZ1bmN0aW9uKG1vZHVsZSxfX3dlYnBhY2tfZXhwb3J0c19fLF9fd2VicGFja19yZXF1aXJlX18pe1widXNlIHN0cmljdFwiO2V2YWwoJ19fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcXG5cXG4vLyBFWFRFUk5BTCBNT0RVTEU6IGV4dGVybmFsIFwiY2xhc3NuYW1lc1wiXFxudmFyIGV4dGVybmFsX2NsYXNzbmFtZXNfID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcXG52YXIgZXh0ZXJuYWxfY2xhc3NuYW1lc19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihleHRlcm5hbF9jbGFzc25hbWVzXyk7XFxuXFxuLy8gRVhURVJOQUwgTU9EVUxFOiBleHRlcm5hbCBcInByb3AtdHlwZXNcIlxcbnZhciBleHRlcm5hbF9wcm9wX3R5cGVzXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XFxudmFyIGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oZXh0ZXJuYWxfcHJvcF90eXBlc18pO1xcblxcbi8vIEVYVEVSTkFMIE1PRFVMRTogZXh0ZXJuYWwgXCJyZWFjdFwiXFxudmFyIGV4dGVybmFsX3JlYWN0XyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XFxudmFyIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKGV4dGVybmFsX3JlYWN0Xyk7XFxuXFxuLy8gRVhURVJOQUwgTU9EVUxFOiBleHRlcm5hbCBcInJlYWN0LXRpbnktcG9wb3ZlclwiXFxudmFyIGV4dGVybmFsX3JlYWN0X3RpbnlfcG9wb3Zlcl8gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xcbnZhciBleHRlcm5hbF9yZWFjdF90aW55X3BvcG92ZXJfZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oZXh0ZXJuYWxfcmVhY3RfdGlueV9wb3BvdmVyXyk7XFxuXFxuLy8gRVhURVJOQUwgTU9EVUxFOiAuL3NyYy9jb21wb25lbnRzL2ljb24vaW5kZXguanMgKyAxIG1vZHVsZXNcXG52YXIgY29tcG9uZW50c19pY29uID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcXG5cXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb21wb25lbnRzL3BvcG92ZXIvcG9wb3Zlci5qc3hcXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxcblxcbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XFxuXFxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxcblxcbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XFxuXFxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxcblxcbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzblxcJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzblxcJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cXG5cXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XFxuXFxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cXG5cXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxcblxcblxcblxcblxcblxcblxcblxcbnZhciBwb3BvdmVyX1BvcG92ZXIgPVxcbi8qI19fUFVSRV9fKi9cXG5mdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcXG4gIF9pbmhlcml0cyhQb3BvdmVyLCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XFxuXFxuICBmdW5jdGlvbiBQb3BvdmVyKHByb3BzKSB7XFxuICAgIHZhciBfdGhpcztcXG5cXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBvcG92ZXIpO1xcblxcbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihQb3BvdmVyKS5jYWxsKHRoaXMsIHByb3BzKSk7XFxuXFxuICAgIF90aGlzLnRvZ2dsZU9wZW4gPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgcmV0dXJuIF90aGlzLnNldFN0YXRlKHtcXG4gICAgICAgIGlzX29wZW46IEJvb2xlYW4oX3RoaXMucHJvcHMubWVzc2FnZSlcXG4gICAgICB9KTtcXG4gICAgfTtcXG5cXG4gICAgX3RoaXMudG9nZ2xlQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgcmV0dXJuIF90aGlzLnNldFN0YXRlKHtcXG4gICAgICAgIGlzX29wZW46IGZhbHNlXFxuICAgICAgfSk7XFxuICAgIH07XFxuXFxuICAgIF90aGlzLnN0YXRlID0ge1xcbiAgICAgIGlzX29wZW46IGZhbHNlXFxuICAgIH07XFxuICAgIHJldHVybiBfdGhpcztcXG4gIH1cXG5cXG4gIF9jcmVhdGVDbGFzcyhQb3BvdmVyLCBbe1xcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xcbiAgICAgICAgaXNfb3BlbjogdGhpcy5wcm9wcy5oYXNfZXJyb3JcXG4gICAgICB9KTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFwicmVuZGVyXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XFxuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcXG4gICAgICAgICAgYWxpZ25tZW50ID0gX3RoaXMkcHJvcHMuYWxpZ25tZW50LFxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXFxuICAgICAgICAgIGNsYXNzTmFtZUJ1YmJsZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZUJ1YmJsZSxcXG4gICAgICAgICAgY2xhc3NOYW1lVGFyZ2V0ID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lVGFyZ2V0LFxcbiAgICAgICAgICBjbGFzc05hbWVUYXJnZXRJY29uID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lVGFyZ2V0SWNvbixcXG4gICAgICAgICAgY291bnRlciA9IF90aGlzJHByb3BzLmNvdW50ZXIsXFxuICAgICAgICAgIGRpc2FibGVfbWVzc2FnZV9pY29uID0gX3RoaXMkcHJvcHMuZGlzYWJsZV9tZXNzYWdlX2ljb24sXFxuICAgICAgICAgIGRpc2FibGVfdGFyZ2V0X2ljb24gPSBfdGhpcyRwcm9wcy5kaXNhYmxlX3RhcmdldF9pY29uLFxcbiAgICAgICAgICBoYXNfZXJyb3IgPSBfdGhpcyRwcm9wcy5oYXNfZXJyb3IsXFxuICAgICAgICAgIGljb24gPSBfdGhpcyRwcm9wcy5pY29uLFxcbiAgICAgICAgICBpZCA9IF90aGlzJHByb3BzLmlkLFxcbiAgICAgICAgICBpc19vcGVuID0gX3RoaXMkcHJvcHMuaXNfb3BlbixcXG4gICAgICAgICAgbWFyZ2luID0gX3RoaXMkcHJvcHMubWFyZ2luLFxcbiAgICAgICAgICBtZXNzYWdlID0gX3RoaXMkcHJvcHMubWVzc2FnZSxcXG4gICAgICAgICAgekluZGV4ID0gX3RoaXMkcHJvcHMuekluZGV4O1xcbiAgICAgIHZhciBoYXNfZXh0ZXJuYWxfb3Blbl9zdGF0ZSA9IGlzX29wZW4gIT09IHVuZGVmaW5lZDtcXG4gICAgICB2YXIgaWNvbl9jbGFzc19uYW1lID0gZXh0ZXJuYWxfY2xhc3NuYW1lc19kZWZhdWx0KCkoY2xhc3NOYW1lVGFyZ2V0SWNvbiwgaWNvbik7XFxuICAgICAgcmV0dXJuIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KGV4dGVybmFsX3JlYWN0X3RpbnlfcG9wb3Zlcl9kZWZhdWx0LmEsIHtcXG4gICAgICAgIGlzT3BlbjogaGFzX2V4dGVybmFsX29wZW5fc3RhdGUgPyBpc19vcGVuIDogdGhpcy5zdGF0ZS5pc19vcGVuLFxcbiAgICAgICAgcG9zaXRpb246IGFsaWdubWVudCxcXG4gICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbjogMC4yNSxcXG4gICAgICAgIHBhZGRpbmc6IG1hcmdpbiArIDgsXFxuICAgICAgICBjb250YWluZXJTdHlsZToge1xcbiAgICAgICAgICB6SW5kZXg6IHpJbmRleCB8fCAxXFxuICAgICAgICB9LFxcbiAgICAgICAgY29udGVudDogZnVuY3Rpb24gY29udGVudChfcmVmKSB7XFxuICAgICAgICAgIHZhciBwb3NpdGlvbiA9IF9yZWYucG9zaXRpb24sXFxuICAgICAgICAgICAgICB0YXJnZXRSZWN0ID0gX3JlZi50YXJnZXRSZWN0LFxcbiAgICAgICAgICAgICAgcG9wb3ZlclJlY3QgPSBfcmVmLnBvcG92ZXJSZWN0O1xcbiAgICAgICAgICByZXR1cm4gZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoZXh0ZXJuYWxfcmVhY3RfdGlueV9wb3BvdmVyX1tcIkFycm93Q29udGFpbmVyXCJdLCB7XFxuICAgICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uLFxcbiAgICAgICAgICAgIHRhcmdldFJlY3Q6IHRhcmdldFJlY3QsXFxuICAgICAgICAgICAgcG9wb3ZlclJlY3Q6IHBvcG92ZXJSZWN0LFxcbiAgICAgICAgICAgIGFycm93Q29sb3I6IGhhc19lcnJvciA/IFxcJ3ZhcigtLXN0YXR1cy1kYW5nZXIpXFwnIDogXFwndmFyKC0tZ2VuZXJhbC1hY3RpdmUpXFwnLFxcbiAgICAgICAgICAgIGFycm93U2l6ZTogNVxcbiAgICAgICAgICB9LCBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XFxuICAgICAgICAgICAgaWQ6IGlkLFxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogZXh0ZXJuYWxfY2xhc3NuYW1lc19kZWZhdWx0KCkoY2xhc3NOYW1lQnViYmxlLCBcXCdkYy1wb3BvdmVyX19idWJibGVcXCcsIHtcXG4gICAgICAgICAgICAgIFxcJ2RjLXBvcG92ZXJfX2J1YmJsZS0tZXJyb3JcXCc6IGhhc19lcnJvclxcbiAgICAgICAgICAgIH0pXFxuICAgICAgICAgIH0sICFkaXNhYmxlX21lc3NhZ2VfaWNvbiAmJiBpY29uID09PSBcXCdpbmZvXFwnICYmIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KFwiaVwiLCB7XFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBcImRjLXBvcG92ZXJfX2J1YmJsZV9faWNvblwiXFxuICAgICAgICAgIH0sIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KGNvbXBvbmVudHNfaWNvbltcImRlZmF1bHRcIl0sIHtcXG4gICAgICAgICAgICBpY29uOiBcIkljSW5mb0JsdWVcIlxcbiAgICAgICAgICB9KSksIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBleHRlcm5hbF9jbGFzc25hbWVzX2RlZmF1bHQoKShcXCdkYy1wb3BvdmVyX19idWJibGVfX3RleHRcXCcsIHtcXG4gICAgICAgICAgICAgIFxcJ2RjLXBvcG92ZXJfX2J1YmJsZV9fdGV4dC0tZXJyb3JcXCc6IGhhc19lcnJvclxcbiAgICAgICAgICAgIH0pXFxuICAgICAgICAgIH0sIG1lc3NhZ2UpKSk7XFxuICAgICAgICB9XFxuICAgICAgfSwgZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xcbiAgICAgICAgY2xhc3NOYW1lOiBleHRlcm5hbF9jbGFzc25hbWVzX2RlZmF1bHQoKShcXCdkYy1wb3BvdmVyXFwnLCBjbGFzc05hbWUpLFxcbiAgICAgICAgaWQ6IGlkLFxcbiAgICAgICAgb25Nb3VzZUVudGVyOiBoYXNfZXh0ZXJuYWxfb3Blbl9zdGF0ZSA/IHVuZGVmaW5lZCA6IHRoaXMudG9nZ2xlT3BlbixcXG4gICAgICAgIG9uTW91c2VMZWF2ZTogaGFzX2V4dGVybmFsX29wZW5fc3RhdGUgPyB1bmRlZmluZWQgOiB0aGlzLnRvZ2dsZUNsb3NlXFxuICAgICAgfSwgZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xcbiAgICAgICAgY2xhc3NOYW1lOiBleHRlcm5hbF9jbGFzc25hbWVzX2RlZmF1bHQoKShjbGFzc05hbWVUYXJnZXQsIFxcJ2RjLXBvcG92ZXJfX3RhcmdldFxcJylcXG4gICAgICB9LCAhZGlzYWJsZV90YXJnZXRfaWNvbiAmJiBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChcImlcIiwge1xcbiAgICAgICAgY2xhc3NOYW1lOiBtZXNzYWdlID8gXFwnZGMtcG9wb3Zlcl9fdGFyZ2V0X19pY29uXFwnIDogXFwnZGMtcG9wb3Zlcl9fdGFyZ2V0X19pY29uLS1kaXNhYmxlZFxcJ1xcbiAgICAgIH0sIGljb24gPT09IFxcJ2luZm9cXCcgJiYgZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50c19pY29uW1wiZGVmYXVsdFwiXSwge1xcbiAgICAgICAgaWNvbjogXCJJY0luZm9PdXRsaW5lXCIsXFxuICAgICAgICBjbGFzc05hbWU6IGljb25fY2xhc3NfbmFtZVxcbiAgICAgIH0pLCBpY29uID09PSBcXCdxdWVzdGlvblxcJyAmJiBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChjb21wb25lbnRzX2ljb25bXCJkZWZhdWx0XCJdLCB7XFxuICAgICAgICBpY29uOiBcIkljVW5rbm93blwiLFxcbiAgICAgICAgY2xhc3NOYW1lOiBpY29uX2NsYXNzX25hbWVcXG4gICAgICB9KSwgaWNvbiA9PT0gXFwnZG90XFwnICYmIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KGNvbXBvbmVudHNfaWNvbltcImRlZmF1bHRcIl0sIHtcXG4gICAgICAgIGljb246IFwiSWNDaXJjbGVcIixcXG4gICAgICAgIGNsYXNzTmFtZTogaWNvbl9jbGFzc19uYW1lLFxcbiAgICAgICAgc2l6ZTogNFxcbiAgICAgIH0pLCBpY29uID09PSBcXCdjb3VudGVyXFwnICYmIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XFxuICAgICAgICBjbGFzc05hbWU6IGljb25fY2xhc3NfbmFtZVxcbiAgICAgIH0sIGNvdW50ZXIpKSwgY2hpbGRyZW4pKSk7XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBQb3BvdmVyO1xcbn0oZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLlB1cmVDb21wb25lbnQpO1xcblxcbnBvcG92ZXJfUG9wb3Zlci5kZWZhdWx0UHJvcHMgPSB7XFxuICBwb3J0YWxfY29udGFpbmVyOiBcXCdkZXJpdl9hcHBcXCcsXFxuICBtYXJnaW46IDBcXG59O1xcbnBvcG92ZXJfUG9wb3Zlci5wcm9wVHlwZXMgPSB7XFxuICBhbGlnbm1lbnQ6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZyxcXG4gIGNoaWxkcmVuOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5ub2RlLFxcbiAgY2xhc3NOYW1lOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5zdHJpbmcsXFxuICBjbGFzc05hbWVCdWJibGU6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZyxcXG4gIGNsYXNzTmFtZVRhcmdldDogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuc3RyaW5nLFxcbiAgY2xhc3NOYW1lVGFyZ2V0SWNvbjogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuc3RyaW5nLFxcbiAgY291bnRlcjogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEubnVtYmVyLFxcbiAgZGlzYWJsZV9tZXNzYWdlX2ljb246IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLmJvb2wsXFxuICBkaXNhYmxlX3RhcmdldF9pY29uOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5ib29sLFxcbiAgaGFzX2Vycm9yOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5ib29sLFxcbiAgaWNvbjogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEub25lT2YoW1xcJ2luZm9cXCcsIFxcJ3F1ZXN0aW9uXFwnLCBcXCdkb3RcXCcsIFxcJ2NvdW50ZXJcXCddKSxcXG4gIGlkOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5zdHJpbmcsXFxuICBpc19vcGVuOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5ib29sLFxcbiAgbWFyZ2luOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5udW1iZXIsXFxuICBtZXNzYWdlOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5vbmVPZlR5cGUoW2V4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZywgZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEub2JqZWN0XSksXFxuICBwb3J0YWxfY29udGFpbmVyOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5zdHJpbmcsXFxuICB6SW5kZXg6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLm51bWJlclxcbn07XFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgcG9wb3ZlciA9IChwb3BvdmVyX1BvcG92ZXIpO1xcbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9zcmMvY29tcG9uZW50cy9wb3BvdmVyL3BvcG92ZXIuc2Nzc1xcbnZhciBwb3BvdmVyX3BvcG92ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtcXG5cXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb21wb25lbnRzL3BvcG92ZXIvaW5kZXguanNcXG5cXG5cXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBjb21wb25lbnRzX3BvcG92ZXIgPSBfX3dlYnBhY2tfZXhwb3J0c19fW1wiZGVmYXVsdFwiXSA9IChwb3BvdmVyKTsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVFF1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTlBWkdWeWFYWXZZMjl0Y0c5dVpXNTBMeTR2YzNKakwyTnZiWEJ2Ym1WdWRITXZjRzl3YjNabGNpOXdiM0J2ZG1WeUxtcHplRDh6TlRreElpd2lkMlZpY0dGamF6b3ZMMEJrWlhKcGRpOWpiMjF3YjI1bGJuUXZMaTl6Y21NdlkyOXRjRzl1Wlc1MGN5OXdiM0J2ZG1WeUwybHVaR1Y0TG1welAySTJOamNpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUdOc1lYTnpUbUZ0WlhNZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabkp2YlNBblkyeGhjM051WVcxbGN5YzdYRzVwYlhCdmNuUWdVSEp2Y0ZSNWNHVnpJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWNtOXRJQ2R3Y205d0xYUjVjR1Z6Snp0Y2JtbHRjRzl5ZENCU1pXRmpkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p5YjIwZ0ozSmxZV04wSnp0Y2JtbHRjRzl5ZENCVWFXNTVVRzl3YjNabGNpd2dleUJCY25KdmQwTnZiblJoYVc1bGNpQjlJR1p5YjIwZ0ozSmxZV04wTFhScGJua3RjRzl3YjNabGNpYzdYRzVwYlhCdmNuUWdTV052YmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWNtOXRJQ2N1TGk5cFkyOXVKenRjYmx4dVkyeGhjM01nVUc5d2IzWmxjaUJsZUhSbGJtUnpJRkpsWVdOMExsQjFjbVZEYjIxd2IyNWxiblFnZTF4dUlDQWdJR052Ym5OMGNuVmpkRzl5SUNod2NtOXdjeWtnZTF4dUlDQWdJQ0FnSUNCemRYQmxjaWh3Y205d2N5azdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMzUmhkR1VnUFNCN0lHbHpYMjl3Wlc0NklHWmhiSE5sSUgwN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWTI5dGNHOXVaVzUwUkdsa1RXOTFiblFnS0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRGTjBZWFJsS0hzZ2FYTmZiM0JsYmpvZ2RHaHBjeTV3Y205d2N5NW9ZWE5mWlhKeWIzSWdmU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkRzluWjJ4bFQzQmxiaUE5SUNncElEMCtJSFJvYVhNdWMyVjBVM1JoZEdVb2V5QnBjMTl2Y0dWdU9pQkNiMjlzWldGdUtIUm9hWE11Y0hKdmNITXViV1Z6YzJGblpTa2dmU2s3WEc1Y2JpQWdJQ0IwYjJkbmJHVkRiRzl6WlNBOUlDZ3BJRDArSUhSb2FYTXVjMlYwVTNSaGRHVW9leUJwYzE5dmNHVnVPaUJtWVd4elpTQjlLVHRjYmx4dUlDQWdJSEpsYm1SbGNpQW9LU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHRnNhV2R1YldWdWRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUdOb2FXeGtjbVZ1TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZMnhoYzNOT1lXMWxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFFuVmlZbXhsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZMnhoYzNOT1lXMWxWR0Z5WjJWMExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsVkdGeVoyVjBTV052Yml4Y2JpQWdJQ0FnSUNBZ0lDQWdJR052ZFc1MFpYSXNYRzRnSUNBZ0lDQWdJQ0FnSUNCa2FYTmhZbXhsWDIxbGMzTmhaMlZmYVdOdmJpeGNiaUFnSUNBZ0lDQWdJQ0FnSUdScGMyRmliR1ZmZEdGeVoyVjBYMmxqYjI0c1hHNGdJQ0FnSUNBZ0lDQWdJQ0JvWVhOZlpYSnliM0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBZMjl1TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhV1FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBjMTl2Y0dWdUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYldGeVoybHVMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSHBKYm1SbGVDeGNiaUFnSUNBZ0lDQWdmU0E5SUhSb2FYTXVjSEp2Y0hNN1hHNWNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2FHRnpYMlY0ZEdWeWJtRnNYMjl3Wlc1ZmMzUmhkR1VnUFNCcGMxOXZjR1Z1SUNFOVBTQjFibVJsWm1sdVpXUTdYRzRnSUNBZ0lDQWdJR052Ym5OMElHbGpiMjVmWTJ4aGMzTmZibUZ0WlNBZ0lDQWdJQ0FnSUQwZ1kyeGhjM05PWVcxbGN5aGpiR0Z6YzA1aGJXVlVZWEpuWlhSSlkyOXVMQ0JwWTI5dUtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDaGNiaUFnSUNBZ0lDQWdJQ0FnSUR4VWFXNTVVRzl3YjNabGNseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHpUM0JsYmoxN2FHRnpYMlY0ZEdWeWJtRnNYMjl3Wlc1ZmMzUmhkR1VnUHlCcGMxOXZjR1Z1SURvZ2RHaHBjeTV6ZEdGMFpTNXBjMTl2Y0dWdWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnZjMmwwYVc5dVBYdGhiR2xuYm0xbGJuUjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSEpoYm5OcGRHbHZia1IxY21GMGFXOXVQWHN3TGpJMWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmhaR1JwYm1jOWUyMWhjbWRwYmlBcklEaDlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdGcGJtVnlVM1I1YkdVOWUzc2dla2x1WkdWNE9pQW9la2x1WkdWNElIeDhJREVwSUgxOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkR1Z1ZEQxN0tIc2djRzl6YVhScGIyNHNJSFJoY21kbGRGSmxZM1FzSUhCdmNHOTJaWEpTWldOMElIMHBJRDArSUNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQRUZ5Y205M1EyOXVkR0ZwYm1WeVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2IzTnBkR2x2YmoxN2NHOXphWFJwYjI1OVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFlYSm5aWFJTWldOMFBYdDBZWEpuWlhSU1pXTjBmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjRzl3YjNabGNsSmxZM1E5ZTNCdmNHOTJaWEpTWldOMGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lYSnliM2REYjJ4dmNqMTdhR0Z6WDJWeWNtOXlJRDhnSjNaaGNpZ3RMWE4wWVhSMWN5MWtZVzVuWlhJcEp5QTZJQ2QyWVhJb0xTMW5aVzVsY21Gc0xXRmpkR2wyWlNrbmZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lYSnliM2RUYVhwbFBYczFmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFpHbDJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdROWUybGtmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxN1kyeGhjM05PWVcxbGN5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFFuVmlZbXhsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuWkdNdGNHOXdiM1psY2w5ZlluVmlZbXhsSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZXlBblpHTXRjRzl3YjNabGNsOWZZblZpWW14bExTMWxjbkp2Y2ljNklHaGhjMTlsY25KdmNpQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNsOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdleUFoWkdsellXSnNaVjl0WlhOellXZGxYMmxqYjI0Z0ppWWdhV052YmlBOVBUMGdKMmx1Wm04bklDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeHBJR05zWVhOelRtRnRaVDBuWkdNdGNHOXdiM1psY2w5ZlluVmlZbXhsWDE5cFkyOXVKejVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4SlkyOXVJR2xqYjI0OUowbGpTVzVtYjBKc2RXVW5JQzgrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHd2YVQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhOd1lXNGdZMnhoYzNOT1lXMWxQWHRqYkdGemMwNWhiV1Z6S0Nka1l5MXdiM0J2ZG1WeVgxOWlkV0ppYkdWZlgzUmxlSFFuTEh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjJSakxYQnZjRzkyWlhKZlgySjFZbUpzWlY5ZmRHVjRkQzB0WlhKeWIzSW5PaUJvWVhOZlpYSnliM0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTbDlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3SUcxbGMzTmhaMlVnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEd3ZjM0JoYmo1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwwRnljbTkzUTI5dWRHRnBibVZ5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNsOVhHNGdJQ0FnSUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEdScGRseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U5ZTJOc1lYTnpUbUZ0WlhNb0oyUmpMWEJ2Y0c5MlpYSW5MQ0JqYkdGemMwNWhiV1VwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaRDE3YVdSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzl1VFc5MWMyVkZiblJsY2oxN2FHRnpYMlY0ZEdWeWJtRnNYMjl3Wlc1ZmMzUmhkR1VnUHlCMWJtUmxabWx1WldRZ09pQjBhR2x6TG5SdloyZHNaVTl3Wlc1OVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzl1VFc5MWMyVk1aV0YyWlQxN2FHRnpYMlY0ZEdWeWJtRnNYMjl3Wlc1ZmMzUmhkR1VnUHlCMWJtUmxabWx1WldRZ09pQjBhR2x6TG5SdloyZHNaVU5zYjNObGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEdScGRpQmpiR0Z6YzA1aGJXVTllMk5zWVhOelRtRnRaWE1vWTJ4aGMzTk9ZVzFsVkdGeVoyVjBMQ0FuWkdNdGNHOXdiM1psY2w5ZmRHRnlaMlYwSnlsOVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2V5RmthWE5oWW14bFgzUmhjbWRsZEY5cFkyOXVJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4YVNCamJHRnpjMDVoYldVOWUyMWxjM05oWjJVZ1B5QW5aR010Y0c5d2IzWmxjbDlmZEdGeVoyVjBYMTlwWTI5dUp5QTZJQ2RrWXkxd2IzQnZkbVZ5WDE5MFlYSm5aWFJmWDJsamIyNHRMV1JwYzJGaWJHVmtKMzArWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2V5aHBZMjl1SUQwOVBTQW5hVzVtYnljcElDQWdJQ0FtSmlBOFNXTnZiaUJwWTI5dVBTZEpZMGx1Wm05UGRYUnNhVzVsSnlCamJHRnpjMDVoYldVOWUybGpiMjVmWTJ4aGMzTmZibUZ0WlgwZ0x6NTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZXlocFkyOXVJRDA5UFNBbmNYVmxjM1JwYjI0bktTQW1KaUE4U1dOdmJpQnBZMjl1UFNkSlkxVnVhMjV2ZDI0bklHTnNZWE56VG1GdFpUMTdhV052Ymw5amJHRnpjMTl1WVcxbGZTQXZQbjFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN0tHbGpiMjRnUFQwOUlDZGtiM1FuS1NBZ0lDQWdJQ1ltSUR4SlkyOXVJR2xqYjI0OUowbGpRMmx5WTJ4bEp5QmpiR0Z6YzA1aGJXVTllMmxqYjI1ZlkyeGhjM05mYm1GdFpYMGdjMmw2WlQxN05IMGdMejU5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2V5aHBZMjl1SUQwOVBTQW5ZMjkxYm5SbGNpY3BJQ0FtSmlBOGMzQmhiaUJqYkdGemMwNWhiV1U5ZTJsamIyNWZZMnhoYzNOZmJtRnRaWDArZXlCamIzVnVkR1Z5SUgwOEwzTndZVzQrZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEM5cFBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdZMmhwYkdSeVpXNTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHd2WkdsMlBseHVJQ0FnSUNBZ0lDQWdJQ0FnUEM5VWFXNTVVRzl3YjNabGNqNWNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzU5WEc1Y2JsQnZjRzkyWlhJdVpHVm1ZWFZzZEZCeWIzQnpJRDBnZTF4dUlDQWdJSEJ2Y25SaGJGOWpiMjUwWVdsdVpYSTZJQ2RrWlhKcGRsOWhjSEFuTEZ4dUlDQWdJRzFoY21kcGJpQWdJQ0FnSUNBZ0lDQTZJREFzWEc1OU8xeHVYRzVRYjNCdmRtVnlMbkJ5YjNCVWVYQmxjeUE5SUh0Y2JpQWdJQ0JoYkdsbmJtMWxiblFnSUNBZ0lDQWdJQ0FnSURvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0JqYUdsc1pISmxiaUFnSUNBZ0lDQWdJQ0FnSURvZ1VISnZjRlI1Y0dWekxtNXZaR1VzWEc0Z0lDQWdZMnhoYzNOT1lXMWxJQ0FnSUNBZ0lDQWdJQ0E2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdZMnhoYzNOT1lXMWxRblZpWW14bElDQWdJQ0E2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdZMnhoYzNOT1lXMWxWR0Z5WjJWMElDQWdJQ0E2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdZMnhoYzNOT1lXMWxWR0Z5WjJWMFNXTnZiaUE2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdZMjkxYm5SbGNpQWdJQ0FnSUNBZ0lDQWdJQ0E2SUZCeWIzQlVlWEJsY3k1dWRXMWlaWElzWEc0Z0lDQWdaR2x6WVdKc1pWOXRaWE56WVdkbFgybGpiMjQ2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNBZ0lHUnBjMkZpYkdWZmRHRnlaMlYwWDJsamIyNGdPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnSUNCb1lYTmZaWEp5YjNJZ0lDQWdJQ0FnSUNBZ0lEb2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJQ0FnYVdOdmJpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBNklGQnliM0JVZVhCbGN5NXZibVZQWmloYkoybHVabThuTENBbmNYVmxjM1JwYjI0bkxDQW5aRzkwSnl3Z0oyTnZkVzUwWlhJblhTa3NYRzRnSUNBZ2FXUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzRnSUNBZ2FYTmZiM0JsYmlBZ0lDQWdJQ0FnSUNBZ0lDQTZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xGeHVJQ0FnSUcxaGNtZHBiaUFnSUNBZ0lDQWdJQ0FnSUNBZ09pQlFjbTl3Vkhsd1pYTXViblZ0WW1WeUxGeHVJQ0FnSUcxbGMzTmhaMlVnSUNBZ0lDQWdJQ0FnSUNBZ09pQlFjbTl3Vkhsd1pYTXViMjVsVDJaVWVYQmxLRnRRY205d1ZIbHdaWE11YzNSeWFXNW5MQ0JRY205d1ZIbHdaWE11YjJKcVpXTjBYU2tzWEc0Z0lDQWdjRzl5ZEdGc1gyTnZiblJoYVc1bGNpQWdJQ0E2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdla2x1WkdWNElDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUZCeWIzQlVlWEJsY3k1dWRXMWlaWElzWEc1OU8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQlFiM0J2ZG1WeU8xeHVJaXdpYVcxd2IzSjBJRkJ2Y0c5MlpYSWdabkp2YlNBbkxpOXdiM0J2ZG1WeUxtcHplQ2M3WEc1cGJYQnZjblFnSUNBZ0lDQWdJQ0FnSUNBZ0lDY3VMM0J2Y0c5MlpYSXVjMk56Y3ljN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElGQnZjRzkyWlhJN1hHNGlYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenM3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZFUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVaQk8wRkJVMEU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFWWkJPMEZCVjBFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVlpCTzBGQlFVRTdRVUZCUVR0QlFVWkJPMEZCUjBFN1FVRkRRVHM3TzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHM3TzBGQlRVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQmIwSkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRk1RVHRCUVZGQk8wRkJRMEU3UVVGSFFUdEJRVUZCTzBGQlRFRTdRVUZUUVR0QlFVRkJPMEZCUTBFN1FVRkJRVHRCUVVkQk8wRkJRMEU3UVVGRVFUdEJRVUZCTzBGQmNrSkJPMEZCVGtFN1FVRnpRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZLUVR0QlFVMUJPMEZCUVVFN1FVRkZRVHRCUVVGQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVUZCTzBGQlUwRTdPenM3UVVFdlJrRTdRVUZEUVR0QlFXbEhRVHRCUVVOQk8wRkJRMEU3UVVGR1FUdEJRVXRCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRV3BDUVR0QlFXOUNRVHM3T3pzN1FVTnFTVUU3UVVGRFFUdEJRVVZCSWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzE0XFxuJyl9LDE2OmZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzKXtldmFsKFwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xNl9fOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1UWXVhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OUFaR1Z5YVhZdlkyOXRjRzl1Wlc1MEwyVjRkR1Z5Ym1Gc0lGd2lRR1JsY21sMkwzTm9ZWEpsWkM5MWRHbHNjeTlqZFhKeVpXNWplVndpUDJWaVptSWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0JmWDFkRlFsQkJRMHRmUlZoVVJWSk9RVXhmVFU5RVZVeEZYMTh4Tmw5Zk95SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vMTZcXG5cIil9LDE5OmZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18pe2V2YWwoXCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cXG4gICAgaWYoZmFsc2UpIHsgdmFyIGNzc1JlbG9hZDsgfVxcbiAgLy8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRrdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk5QVpHVnlhWFl2WTI5dGNHOXVaVzUwTHk0dmMzSmpMMk52YlhCdmJtVnVkSE12Y0c5d2IzWmxjaTl3YjNCdmRtVnlMbk5qYzNNL1pXVmtOU0pkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdkx5QmxlSFJ5WVdOMFpXUWdZbmtnYldsdWFTMWpjM010WlhoMGNtRmpkQzF3YkhWbmFXNWNiaUFnSUNCcFppaHRiMlIxYkdVdWFHOTBLU0I3WEc0Z0lDQWdJQ0F2THlBeE5UZ3dPREF5TURReU1qYzBYRzRnSUNBZ0lDQjJZWElnWTNOelVtVnNiMkZrSUQwZ2NtVnhkV2x5WlNoY0lpRXVMaTh1TGk4dUxpOXViMlJsWDIxdlpIVnNaWE12WTNOekxXaHZkQzFzYjJGa1pYSXZhRzkwVFc5a2RXeGxVbVZ3YkdGalpXMWxiblF1YW5OY0lpa29iVzlrZFd4bExtbGtMQ0I3WENKbWFXeGxUV0Z3WENJNlhDSjdabWxzWlU1aGJXVjlYQ0o5S1R0Y2JpQWdJQ0FnSUcxdlpIVnNaUzVvYjNRdVpHbHpjRzl6WlNoamMzTlNaV3h2WVdRcE8xeHVJQ0FnSUNBZ2JXOWtkV3hsTG1odmRDNWhZMk5sY0hRb2RXNWtaV1pwYm1Wa0xDQmpjM05TWld4dllXUXBPenRjYmlBZ0lDQjlYRzRnSUNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkRRU3huUTBGTFFUdEJRVU5CSWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzE5XFxuXCIpfSwyOmZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzKXtldmFsKFwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18yX187Ly8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTWk1cWN5SXNJbk52ZFhKalpYTWlPbHNpZDJWaWNHRmphem92TDBCa1pYSnBkaTlqYjIxd2IyNWxiblF2WlhoMFpYSnVZV3dnWENKamJHRnpjMjVoYldWelhDSS9ZV0ZoWWlKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZWMFZDVUVGRFMxOUZXRlJGVWs1QlRGOU5UMFJWVEVWZlh6SmZYenNpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCSWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzJcXG5cIil9LDM6ZnVuY3Rpb24obW9kdWxlLF9fd2VicGFja19leHBvcnRzX18sX193ZWJwYWNrX3JlcXVpcmVfXyl7XCJ1c2Ugc3RyaWN0XCI7ZXZhbChcIl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcXG5cXG4vLyBFWFRFUk5BTCBNT0RVTEU6IGV4dGVybmFsIFxcXCJjbGFzc25hbWVzXFxcIlxcbnZhciBleHRlcm5hbF9jbGFzc25hbWVzXyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XFxudmFyIGV4dGVybmFsX2NsYXNzbmFtZXNfZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oZXh0ZXJuYWxfY2xhc3NuYW1lc18pO1xcblxcbi8vIEVYVEVSTkFMIE1PRFVMRTogZXh0ZXJuYWwgXFxcInByb3AtdHlwZXNcXFwiXFxudmFyIGV4dGVybmFsX3Byb3BfdHlwZXNfID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcXG52YXIgZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihleHRlcm5hbF9wcm9wX3R5cGVzXyk7XFxuXFxuLy8gRVhURVJOQUwgTU9EVUxFOiBleHRlcm5hbCBcXFwicmVhY3RcXFwiXFxudmFyIGV4dGVybmFsX3JlYWN0XyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XFxudmFyIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKGV4dGVybmFsX3JlYWN0Xyk7XFxuXFxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29tcG9uZW50cy9pY29uL2ljb24uanN4XFxuXFxuXFxuIC8vIFRPRE86IFttb3ZlLXRvLXNoYXJlZF1cXG5cXG52YXIgZ2V0VXJsQmFzZSA9IGZ1bmN0aW9uIGdldFVybEJhc2UoKSB7XFxuICB2YXIgcGF0aCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJyc7XFxuICB2YXIgbCA9IHdpbmRvdy5sb2NhdGlvbjtcXG4gIGlmICghL15cXFxcLyhicl8pLy50ZXN0KGwucGF0aG5hbWUpKSByZXR1cm4gcGF0aDtcXG4gIHJldHVybiBcXFwiL1xcXCIuY29uY2F0KGwucGF0aG5hbWUuc3BsaXQoJy8nKVsxXSkuY29uY2F0KC9eXFxcXC8vLnRlc3QocGF0aCkgPyBwYXRoIDogXFxcIi9cXFwiLmNvbmNhdChwYXRoKSk7XFxufTsgLy8gVE9ETzogW21vdmUtdG8tc2hhcmVkXVxcblxcblxcbnZhciBnZXRLZWJhYkNhc2UgPSBmdW5jdGlvbiBnZXRLZWJhYkNhc2Uoc3RyKSB7XFxuICBpZiAoIXN0cikgcmV0dXJuIHN0cjtcXG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFthLXowLTldKShbQS1aXSkvZywgJyQxLSQyJykgLy8gZ2V0IGFsbCBsb3dlcmNhc2UgbGV0dGVycyB0aGF0IGFyZSBuZWFyIHRvIHVwcGVyY2FzZSBvbmVzXFxuICAucmVwbGFjZSgvW1xcXFxzXSsvZywgJy0nKSAvLyByZXBsYWNlIGFsbCBzcGFjZXMgYW5kIGxvdyBkYXNoXFxuICAudG9Mb3dlckNhc2UoKTtcXG59O1xcblxcbnZhciBpY29uX0ljb24gPSBmdW5jdGlvbiBJY29uKF9yZWYpIHtcXG4gIHZhciBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcXG4gICAgICBjb2xvciA9IF9yZWYuY29sb3IsXFxuICAgICAgY3VzdG9tX2NvbG9yID0gX3JlZi5jdXN0b21fY29sb3IsXFxuICAgICAgaGVpZ2h0ID0gX3JlZi5oZWlnaHQsXFxuICAgICAgaWNvbiA9IF9yZWYuaWNvbixcXG4gICAgICBvbkNsaWNrID0gX3JlZi5vbkNsaWNrLFxcbiAgICAgIG9uTW91c2VFbnRlciA9IF9yZWYub25Nb3VzZUVudGVyLFxcbiAgICAgIG9uTW91c2VMZWF2ZSA9IF9yZWYub25Nb3VzZUxlYXZlLFxcbiAgICAgIF9yZWYkc2l6ZSA9IF9yZWYuc2l6ZSxcXG4gICAgICBzaXplID0gX3JlZiRzaXplID09PSB2b2lkIDAgPyAxNiA6IF9yZWYkc2l6ZSxcXG4gICAgICB3aWR0aCA9IF9yZWYud2lkdGg7XFxuICBpZiAoIWljb24pIHJldHVybiBudWxsO1xcbiAgdmFyIGZpbGVuYW1lID0gJ2NvbW1vbic7XFxuICB2YXIgZmlsZW5hbWVzID0gL15JYyhDdXJyZW5jeXxUcmFkZXR5cGV8TXQ1fEZsYWd8VW5kZXJseWluZykvZy5leGVjKGljb24pO1xcblxcbiAgaWYgKGZpbGVuYW1lcykge1xcbiAgICBmaWxlbmFtZSA9IGdldEtlYmFiQ2FzZShmaWxlbmFtZXNbMV0pO1xcbiAgfVxcblxcbiAgdmFyIGlkID0gaWNvbi5zdGFydHNXaXRoKCdJY1VuZGVybHlpbmcnKSA/IFxcXCJpYy11bmRlcmx5aW5nLVxcXCIuY29uY2F0KGljb24uc3BsaXQoJ0ljVW5kZXJseWluZycpWzFdLnRvVXBwZXJDYXNlKCkpIDogZ2V0S2ViYWJDYXNlKGljb24pO1xcbiAgcmV0dXJuIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KFxcXCJzdmdcXFwiLCB7XFxuICAgIHhtbG5zOiBcXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiLFxcbiAgICB4bWxuc1hsaW5rOiBcXFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1xcXCIsXFxuICAgIGNsYXNzTmFtZTogZXh0ZXJuYWxfY2xhc3NuYW1lc19kZWZhdWx0KCkoJ2RjLWljb24nLCBjbGFzc05hbWUsIHtcXG4gICAgICAnZGMtaWNvbi0tYWN0aXZlJzogY29sb3IgPT09ICdhY3RpdmUnLFxcbiAgICAgICdkYy1pY29uLS1kaXNhYmxlZCc6IGNvbG9yID09PSAnZGlzYWJsZWQnLFxcbiAgICAgICdkYy1pY29uLS1ncmVlbic6IGNvbG9yID09PSAnZ3JlZW4nIHx8IGljb24gPT09ICdJY1Byb2ZpdCcsXFxuICAgICAgJ2RjLWljb24tLXJlZCc6IGNvbG9yID09PSAncmVkJyB8fCBpY29uID09PSAnSWNMb3NzJyxcXG4gICAgICAnZGMtaWNvbi0tc2Vjb25kYXJ5JzogY29sb3IgPT09ICdzZWNvbmRhcnknLFxcbiAgICAgICdkYy1pY29uLS1icmFuZCc6IGNvbG9yID09PSAnYnJhbmQnXFxuICAgIH0pLFxcbiAgICBoZWlnaHQ6IGhlaWdodCB8fCBzaXplLFxcbiAgICB3aWR0aDogd2lkdGggfHwgc2l6ZSxcXG4gICAgb25DbGljazogb25DbGljayxcXG4gICAgb25Nb3VzZUVudGVyOiBvbk1vdXNlRW50ZXIsXFxuICAgIG9uTW91c2VMZWF2ZTogb25Nb3VzZUxlYXZlLFxcbiAgICBzdHlsZTogY3VzdG9tX2NvbG9yID8ge1xcbiAgICAgICctLWZpbGwtY29sb3IxJzogY3VzdG9tX2NvbG9yXFxuICAgIH0gOiB1bmRlZmluZWRcXG4gIH0sIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KFxcXCJ1c2VcXFwiLCB7XFxuICAgIHhsaW5rSHJlZjogXFxcIlxcXCIuY29uY2F0KGdldFVybEJhc2UoXFxcIi9wdWJsaWMvaW1hZ2VzL3Nwcml0ZS9cXFwiLmNvbmNhdChmaWxlbmFtZSwgXFxcIi5zdmdcXFwiKSksIFxcXCIjXFxcIikuY29uY2F0KGlkKVxcbiAgfSkpO1xcbn07XFxuXFxuaWNvbl9JY29uLnByb3BUeXBlcyA9IHtcXG4gIGNsYXNzTmFtZTogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEub25lT2ZUeXBlKFtleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5vYmplY3QsIGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZ10pLFxcbiAgY29sb3I6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLm9uZU9mVHlwZShbZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuYm9vbCwgZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuc3RyaW5nXSksXFxuICBjdXN0b21fY29sb3I6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZyxcXG4gIGhlaWdodDogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEub25lT2ZUeXBlKFtleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5udW1iZXIsIGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZ10pLFxcbiAgaWNvbjogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuc3RyaW5nLFxcbiAgb25DbGljazogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuZnVuYyxcXG4gIG9uTW91c2VFbnRlcjogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuZnVuYyxcXG4gIG9uTW91c2VMZWF2ZTogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuZnVuYyxcXG4gIHNpemU6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLm9uZU9mVHlwZShbZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEubnVtYmVyLCBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5zdHJpbmddKSxcXG4gIHdpZHRoOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5vbmVPZlR5cGUoW2V4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLm51bWJlciwgZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuc3RyaW5nXSlcXG59O1xcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIGljb25faWNvbiA9IChpY29uX0ljb24pO1xcbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9zcmMvY29tcG9uZW50cy9pY29uL2ljb24uc2Nzc1xcbnZhciBjb21wb25lbnRzX2ljb25faWNvbiA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XFxuXFxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29tcG9uZW50cy9pY29uL2luZGV4LmpzXFxuXFxuXFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgY29tcG9uZW50c19pY29uID0gX193ZWJwYWNrX2V4cG9ydHNfX1tcXFwiZGVmYXVsdFxcXCJdID0gKGljb25faWNvbik7Ly8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTXk1cWN5SXNJbk52ZFhKalpYTWlPbHNpZDJWaWNHRmphem92TDBCa1pYSnBkaTlqYjIxd2IyNWxiblF2TGk5emNtTXZZMjl0Y0c5dVpXNTBjeTlwWTI5dUwybGpiMjR1YW5ONFB6SmhZVE1pTENKM1pXSndZV05yT2k4dlFHUmxjbWwyTDJOdmJYQnZibVZ1ZEM4dUwzTnlZeTlqYjIxd2IyNWxiblJ6TDJsamIyNHZhVzVrWlhndWFuTS9ZV1UyTUNKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ1kyeGhjM05PWVcxbGN5Qm1jbTl0SUNkamJHRnpjMjVoYldWekp6dGNibWx0Y0c5eWRDQlFjbTl3Vkhsd1pYTWdJR1p5YjIwZ0ozQnliM0F0ZEhsd1pYTW5PMXh1YVcxd2IzSjBJRkpsWVdOMElDQWdJQ0FnWm5KdmJTQW5jbVZoWTNRbk8xeHVYRzR2THlCVVQwUlBPaUJiYlc5MlpTMTBieTF6YUdGeVpXUmRYRzVqYjI1emRDQm5aWFJWY214Q1lYTmxJRDBnS0hCaGRHZ2dQU0FuSnlrZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUd3Z1BTQjNhVzVrYjNjdWJHOWpZWFJwYjI0N1hHNWNiaUFnSUNCcFppQW9JUzllWEZ3dktHSnlYeWt2TG5SbGMzUW9iQzV3WVhSb2JtRnRaU2twSUhKbGRIVnliaUJ3WVhSb08xeHVYRzRnSUNBZ2NtVjBkWEp1SUdBdkpIdHNMbkJoZEdodVlXMWxMbk53YkdsMEtDY3ZKeWxiTVYxOUpIc3ZYbHhjTHk4dWRHVnpkQ2h3WVhSb0tTQS9JSEJoZEdnZ09pQmdMeVI3Y0dGMGFIMWdmV0E3WEc1OU8xeHVYRzR2THlCVVQwUlBPaUJiYlc5MlpTMTBieTF6YUdGeVpXUmRYRzVqYjI1emRDQm5aWFJMWldKaFlrTmhjMlVnUFNBb2MzUnlLU0E5UGlCN1hHNGdJQ0FnYVdZZ0tDRnpkSElwSUhKbGRIVnliaUJ6ZEhJN1hHNGdJQ0FnY21WMGRYSnVJSE4wY2x4dUlDQWdJQ0FnSUNBdWNtVndiR0ZqWlNndktGdGhMWG93TFRsZEtTaGJRUzFhWFNrdlp5d2dKeVF4TFNReUp5a2dMeThnWjJWMElHRnNiQ0JzYjNkbGNtTmhjMlVnYkdWMGRHVnljeUIwYUdGMElHRnlaU0J1WldGeUlIUnZJSFZ3Y0dWeVkyRnpaU0J2Ym1WelhHNGdJQ0FnSUNBZ0lDNXlaWEJzWVdObEtDOWJYRnh6WFNzdlp5d2dKeTBuS1NBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2NtVndiR0ZqWlNCaGJHd2djM0JoWTJWeklHRnVaQ0JzYjNjZ1pHRnphRnh1SUNBZ0lDQWdJQ0F1ZEc5TWIzZGxja05oYzJVb0tUdGNibjA3WEc1Y2JtTnZibk4wSUVsamIyNGdQU0FvZTF4dUlDQWdJR05zWVhOelRtRnRaU3hjYmlBZ0lDQmpiMnh2Y2l4Y2JpQWdJQ0JqZFhOMGIyMWZZMjlzYjNJc1hHNGdJQ0FnYUdWcFoyaDBMRnh1SUNBZ0lHbGpiMjRzWEc0Z0lDQWdiMjVEYkdsamF5eGNiaUFnSUNCdmJrMXZkWE5sUlc1MFpYSXNYRzRnSUNBZ2IyNU5iM1Z6WlV4bFlYWmxMRnh1SUNBZ0lITnBlbVVnUFNBeE5peGNiaUFnSUNCM2FXUjBhQ3hjYm4wcElEMCtJSHRjYmlBZ0lDQnBaaUFvSVdsamIyNHBJSEpsZEhWeWJpQnVkV3hzTzF4dVhHNGdJQ0FnYkdWMElHWnBiR1Z1WVcxbElEMGdKMk52YlcxdmJpYzdYRzRnSUNBZ1kyOXVjM1FnWm1sc1pXNWhiV1Z6SUQwZ0wxNUpZeWhEZFhKeVpXNWplWHhVY21Ga1pYUjVjR1Y4VFhRMWZFWnNZV2Q4Vlc1a1pYSnNlV2x1Wnlrdlp5NWxlR1ZqS0dsamIyNHBPMXh1SUNBZ0lHbG1JQ2htYVd4bGJtRnRaWE1wSUh0Y2JpQWdJQ0FnSUNBZ1ptbHNaVzVoYldVZ1BTQm5aWFJMWldKaFlrTmhjMlVvWm1sc1pXNWhiV1Z6V3pGZEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkQ0JwWkNBOUlHbGpiMjR1YzNSaGNuUnpWMmwwYUNnblNXTlZibVJsY214NWFXNW5KeWtnUHlCZ2FXTXRkVzVrWlhKc2VXbHVaeTBrZTJsamIyNHVjM0JzYVhRb0owbGpWVzVrWlhKc2VXbHVaeWNwV3pGZExuUnZWWEJ3WlhKRFlYTmxLQ2w5WUNBNklHZGxkRXRsWW1GaVEyRnpaU2hwWTI5dUtUdGNibHh1SUNBZ0lISmxkSFZ5YmlBb1hHNGdJQ0FnSUNBZ0lEeHpkbWRjYmlBZ0lDQWdJQ0FnSUNBZ0lIaHRiRzV6UFNkb2RIUndPaTh2ZDNkM0xuY3pMbTl5Wnk4eU1EQXdMM04yWnlkY2JpQWdJQ0FnSUNBZ0lDQWdJSGh0Ykc1eldHeHBibXM5SjJoMGRIQTZMeTkzZDNjdWR6TXViM0puTHpFNU9Ua3ZlR3hwYm1zblhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U5ZTJOc1lYTnpUbUZ0WlhNb0oyUmpMV2xqYjI0bkxDQmpiR0Z6YzA1aGJXVXNJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuWkdNdGFXTnZiaTB0WVdOMGFYWmxKeUFnSURvZ1kyOXNiM0lnUFQwOUlDZGhZM1JwZG1VbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZGtZeTFwWTI5dUxTMWthWE5oWW14bFpDY2dPaUJqYjJ4dmNpQTlQVDBnSjJScGMyRmliR1ZrSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblpHTXRhV052YmkwdFozSmxaVzRuSUNBZ0lEb2dZMjlzYjNJZ1BUMDlJQ2RuY21WbGJpY2dmSHdnYVdOdmJpQTlQVDBnSjBsalVISnZabWwwSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblpHTXRhV052YmkwdGNtVmtKeUFnSUNBZ0lEb2dZMjlzYjNJZ1BUMDlJQ2R5WldRbklIeDhJR2xqYjI0Z1BUMDlJQ2RKWTB4dmMzTW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RrWXkxcFkyOXVMUzF6WldOdmJtUmhjbmtuT2lCamIyeHZjaUE5UFQwZ0ozTmxZMjl1WkdGeWVTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMlJqTFdsamIyNHRMV0p5WVc1a0p5QWdJQ0E2SUdOdmJHOXlJRDA5UFNBblluSmhibVFuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU2w5WEc0Z0lDQWdJQ0FnSUNBZ0lDQm9aV2xuYUhROWUyaGxhV2RvZENCOGZDQnphWHBsZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdkMmxrZEdnOWUzZHBaSFJvSUh4OElITnBlbVY5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZia05zYVdOclBYdHZia05zYVdOcmZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYjI1TmIzVnpaVVZ1ZEdWeVBYdHZiazF2ZFhObFJXNTBaWEo5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZiazF2ZFhObFRHVmhkbVU5ZTI5dVRXOTFjMlZNWldGMlpYMWNiaUFnSUNBZ0lDQWdJQ0FnSUhOMGVXeGxQWHRqZFhOMGIyMWZZMjlzYjNJZ1B5QjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKeTB0Wm1sc2JDMWpiMnh2Y2pFbk9pQmpkWE4wYjIxZlkyOXNiM0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJRG9nZFc1a1pXWnBibVZrZlZ4dUlDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0E4ZFhObElIaHNhVzVyU0hKbFpqMTdZQ1I3S0dkbGRGVnliRUpoYzJVb1lDOXdkV0pzYVdNdmFXMWhaMlZ6TDNOd2NtbDBaUzhrZTJacGJHVnVZVzFsZlM1emRtZGdLU2w5SXlSN2FXUjlZSDBnTHo1Y2JpQWdJQ0FnSUNBZ1BDOXpkbWMrWEc0Z0lDQWdLVHRjYm4wN1hHNWNia2xqYjI0dWNISnZjRlI1Y0dWeklEMGdlMXh1SUNBZ0lHTnNZWE56VG1GdFpUb2dVSEp2Y0ZSNWNHVnpMbTl1WlU5bVZIbHdaU2hiWEc0Z0lDQWdJQ0FnSUZCeWIzQlVlWEJsY3k1dlltcGxZM1FzWEc0Z0lDQWdJQ0FnSUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdYU2tzWEc0Z0lDQWdZMjlzYjNJNklGQnliM0JVZVhCbGN5NXZibVZQWmxSNWNHVW9XMXh1SUNBZ0lDQWdJQ0JRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnSUNBZ0lDQWdVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNCZEtTeGNiaUFnSUNCamRYTjBiMjFmWTI5c2IzSTZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzRnSUNBZ2FHVnBaMmgwSUNBZ0lDQWdPaUJRY205d1ZIbHdaWE11YjI1bFQyWlVlWEJsS0Z0Y2JpQWdJQ0FnSUNBZ1VISnZjRlI1Y0dWekxtNTFiV0psY2l4Y2JpQWdJQ0FnSUNBZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0JkS1N4Y2JpQWdJQ0JwWTI5dUlDQWdJQ0FnSUNBNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJQ0FnYjI1RGJHbGpheUFnSUNBZ09pQlFjbTl3Vkhsd1pYTXVablZ1WXl4Y2JpQWdJQ0J2YmsxdmRYTmxSVzUwWlhJNklGQnliM0JVZVhCbGN5NW1kVzVqTEZ4dUlDQWdJRzl1VFc5MWMyVk1aV0YyWlRvZ1VISnZjRlI1Y0dWekxtWjFibU1zWEc0Z0lDQWdjMmw2WlNBZ0lDQWdJQ0FnT2lCUWNtOXdWSGx3WlhNdWIyNWxUMlpVZVhCbEtGdGNiaUFnSUNBZ0lDQWdVSEp2Y0ZSNWNHVnpMbTUxYldKbGNpeGNiaUFnSUNBZ0lDQWdVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNCZEtTeGNiaUFnSUNCM2FXUjBhRG9nVUhKdmNGUjVjR1Z6TG05dVpVOW1WSGx3WlNoYlhHNGdJQ0FnSUNBZ0lGQnliM0JVZVhCbGN5NXVkVzFpWlhJc1hHNGdJQ0FnSUNBZ0lGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJQ0FnWFNrc1hHNTlPMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JKWTI5dU8xeHVJaXdpYVcxd2IzSjBJRWxqYjI0Z1puSnZiU0FuTGk5cFkyOXVMbXB6ZUNjN1hHNXBiWEJ2Y25RZ0lDQWdJQ0FnSUNBZ0lDQW5MaTlwWTI5dUxuTmpjM01uTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCSlkyOXVPMXh1SWwwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN096czdPenM3T3pzN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVVZCTzBGQlFVRTdRVUZEUVR0QlFVVkJPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCU1VFN1FVRkRRVHRCUVVOQk8wRkJWMEU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVVZCTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlRrRTdRVUZSUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVVJCTzBGQmFFSkJPMEZCYjBKQk8wRkJRVUU3UVVGSFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVbEJPMEZCU1VFN1FVRkRRVHRCUVVsQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZKUVR0QlFYUkNRVHRCUVRSQ1FUczdPenM3UVVOc1IwRTdRVUZEUVR0QlFVVkJJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vM1xcblwiKX0sNDpmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyxfX3dlYnBhY2tfcmVxdWlyZV9fKXtldmFsKFwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXFxuICAgIGlmKGZhbHNlKSB7IHZhciBjc3NSZWxvYWQ7IH1cXG4gIC8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU5DNXFjeUlzSW5OdmRYSmpaWE1pT2xzaWQyVmljR0ZqYXpvdkwwQmtaWEpwZGk5amIyMXdiMjVsYm5RdkxpOXpjbU12WTI5dGNHOXVaVzUwY3k5cFkyOXVMMmxqYjI0dWMyTnpjejgzWWpGaElsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaTh2SUdWNGRISmhZM1JsWkNCaWVTQnRhVzVwTFdOemN5MWxlSFJ5WVdOMExYQnNkV2RwYmx4dUlDQWdJR2xtS0cxdlpIVnNaUzVvYjNRcElIdGNiaUFnSUNBZ0lDOHZJREUxT0RBNE1ESXdOREkxTURWY2JpQWdJQ0FnSUhaaGNpQmpjM05TWld4dllXUWdQU0J5WlhGMWFYSmxLRndpSVM0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OWpjM010YUc5MExXeHZZV1JsY2k5b2IzUk5iMlIxYkdWU1pYQnNZV05sYldWdWRDNXFjMXdpS1NodGIyUjFiR1V1YVdRc0lIdGNJbVpwYkdWTllYQmNJanBjSW50bWFXeGxUbUZ0WlgxY0luMHBPMXh1SUNBZ0lDQWdiVzlrZFd4bExtaHZkQzVrYVhOd2IzTmxLR056YzFKbGJHOWhaQ2s3WEc0Z0lDQWdJQ0J0YjJSMWJHVXVhRzkwTG1GalkyVndkQ2gxYm1SbFptbHVaV1FzSUdOemMxSmxiRzloWkNrN08xeHVJQ0FnSUgxY2JpQWdJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVOQkxHZERRVXRCTzBGQlEwRWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vNFxcblwiKX0sNDA6ZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMsX193ZWJwYWNrX3JlcXVpcmVfXyl7ZXZhbChcIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxcbiAgICBpZihmYWxzZSkgeyB2YXIgY3NzUmVsb2FkOyB9XFxuICAvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lOREF1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTlBWkdWeWFYWXZZMjl0Y0c5dVpXNTBMeTR2YzNKakwyTnZiWEJ2Ym1WdWRITXZZM0o1Y0hSdkxXMXZibVY1TDJOeWVYQjBieTF0YjI1bGVTNXpZM056UDJJMU9XRWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHk4Z1pYaDBjbUZqZEdWa0lHSjVJRzFwYm1rdFkzTnpMV1Y0ZEhKaFkzUXRjR3gxWjJsdVhHNGdJQ0FnYVdZb2JXOWtkV3hsTG1odmRDa2dlMXh1SUNBZ0lDQWdMeThnTVRVNE1EZ3dNakEwTWpZek1GeHVJQ0FnSUNBZ2RtRnlJR056YzFKbGJHOWhaQ0E5SUhKbGNYVnBjbVVvWENJaExpNHZMaTR2TGk0dmJtOWtaVjl0YjJSMWJHVnpMMk56Y3kxb2IzUXRiRzloWkdWeUwyaHZkRTF2WkhWc1pWSmxjR3hoWTJWdFpXNTBMbXB6WENJcEtHMXZaSFZzWlM1cFpDd2dlMXdpWm1sc1pVMWhjRndpT2x3aWUyWnBiR1ZPWVcxbGZWd2lmU2s3WEc0Z0lDQWdJQ0J0YjJSMWJHVXVhRzkwTG1ScGMzQnZjMlVvWTNOelVtVnNiMkZrS1R0Y2JpQWdJQ0FnSUcxdlpIVnNaUzVvYjNRdVlXTmpaWEIwS0hWdVpHVm1hVzVsWkN3Z1kzTnpVbVZzYjJGa0tUczdYRzRnSUNBZ2ZWeHVJQ0FpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlEwRXNaME5CUzBFN1FVRkRRU0lzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzQwXFxuXCIpfSw0MTpmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyxfX3dlYnBhY2tfcmVxdWlyZV9fKXtldmFsKFwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXFxuICAgIGlmKGZhbHNlKSB7IHZhciBjc3NSZWxvYWQ7IH1cXG4gIC8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU5ERXVhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OUFaR1Z5YVhZdlkyOXRjRzl1Wlc1MEx5NHZjM0pqTDJOdmJYQnZibVZ1ZEhNdmJXOXVaWGt2Ylc5dVpYa3VjMk56Y3o5alpqRTVJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4dklHVjRkSEpoWTNSbFpDQmllU0J0YVc1cExXTnpjeTFsZUhSeVlXTjBMWEJzZFdkcGJseHVJQ0FnSUdsbUtHMXZaSFZzWlM1b2IzUXBJSHRjYmlBZ0lDQWdJQzh2SURFMU9EQTRNREl3TkRJd05EUmNiaUFnSUNBZ0lIWmhjaUJqYzNOU1pXeHZZV1FnUFNCeVpYRjFhWEpsS0Z3aUlTNHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTlqYzNNdGFHOTBMV3h2WVdSbGNpOW9iM1JOYjJSMWJHVlNaWEJzWVdObGJXVnVkQzVxYzF3aUtTaHRiMlIxYkdVdWFXUXNJSHRjSW1acGJHVk5ZWEJjSWpwY0ludG1hV3hsVG1GdFpYMWNJbjBwTzF4dUlDQWdJQ0FnYlc5a2RXeGxMbWh2ZEM1a2FYTndiM05sS0dOemMxSmxiRzloWkNrN1hHNGdJQ0FnSUNCdGIyUjFiR1V1YUc5MExtRmpZMlZ3ZENoMWJtUmxabWx1WldRc0lHTnpjMUpsYkc5aFpDazdPMXh1SUNBZ0lIMWNiaUFnSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlFVTkJMR2REUVV0Qk8wRkJRMEVpTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzQxXFxuXCIpfSw1NDpmdW5jdGlvbihtb2R1bGUsX193ZWJwYWNrX2V4cG9ydHNfXyxfX3dlYnBhY2tfcmVxdWlyZV9fKXtcInVzZSBzdHJpY3RcIjtldmFsKCdfX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XFxuXFxuLy8gRVhURVJOQUwgTU9EVUxFOiBleHRlcm5hbCBcImNsYXNzbmFtZXNcIlxcbnZhciBleHRlcm5hbF9jbGFzc25hbWVzXyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XFxudmFyIGV4dGVybmFsX2NsYXNzbmFtZXNfZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oZXh0ZXJuYWxfY2xhc3NuYW1lc18pO1xcblxcbi8vIEVYVEVSTkFMIE1PRFVMRTogZXh0ZXJuYWwgXCJwcm9wLXR5cGVzXCJcXG52YXIgZXh0ZXJuYWxfcHJvcF90eXBlc18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xcbnZhciBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKGV4dGVybmFsX3Byb3BfdHlwZXNfKTtcXG5cXG4vLyBFWFRFUk5BTCBNT0RVTEU6IGV4dGVybmFsIFwicmVhY3RcIlxcbnZhciBleHRlcm5hbF9yZWFjdF8gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xcbnZhciBleHRlcm5hbF9yZWFjdF9kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihleHRlcm5hbF9yZWFjdF8pO1xcblxcbi8vIEVYVEVSTkFMIE1PRFVMRTogZXh0ZXJuYWwgXCJAZGVyaXYvc2hhcmVkL3V0aWxzL2N1cnJlbmN5XCJcXG52YXIgY3VycmVuY3lfID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XFxudmFyIGN1cnJlbmN5X2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKGN1cnJlbmN5Xyk7XFxuXFxuLy8gRVhURVJOQUwgTU9EVUxFOiAuL3NyYy9jb21wb25lbnRzL3BvcG92ZXIvaW5kZXguanMgKyAxIG1vZHVsZXNcXG52YXIgcG9wb3ZlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpO1xcblxcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvbXBvbmVudHMvY3J5cHRvLW1vbmV5L2NyeXB0by1tb25leS5qc3hcXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxcblxcbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9XFxuXFxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cXG5cXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cXG5cXG5cXG5cXG5cXG5cXG52YXIgY3J5cHRvX21vbmV5X0NyeXB0b01vbmV5ID0gZnVuY3Rpb24gQ3J5cHRvTW9uZXkoX3JlZikge1xcbiAgdmFyIHJlYWxWYWx1ZSA9IF9yZWYucmVhbFZhbHVlLFxcbiAgICAgIHRvZ2dsZVZhbHVlID0gX3JlZi50b2dnbGVWYWx1ZTtcXG5cXG4gIHZhciBfdXNlU3RhdGUgPSBPYmplY3QoZXh0ZXJuYWxfcmVhY3RfW1widXNlU3RhdGVcIl0pKGZhbHNlKSxcXG4gICAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSxcXG4gICAgICBjcnlwdG9Ub2dnbGVWaWV3ID0gX3VzZVN0YXRlMlswXSxcXG4gICAgICBzZXRDcnlwdG9Ub2dnbGVWaWV3ID0gX3VzZVN0YXRlMlsxXTtcXG5cXG4gIHJldHVybiBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuRnJhZ21lbnQsIG51bGwsIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KHBvcG92ZXJbXCJkZWZhdWx0XCJdLCB7XFxuICAgIGFsaWdubWVudDogXCJ0b3BcIixcXG4gICAgY2xhc3NOYW1lOiBcImNyeXB0by1wb3BvdmVyXCIsXFxuICAgIG1lc3NhZ2U6IHJlYWxWYWx1ZSxcXG4gICAgaXNfb3BlbjogY3J5cHRvVG9nZ2xlVmlldyxcXG4gICAgZGlzYWJsZV90YXJnZXRfaWNvbjogdHJ1ZVxcbiAgfSwgZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcXG4gICAgb25Nb3VzZUVudGVyOiBmdW5jdGlvbiBvbk1vdXNlRW50ZXIoKSB7XFxuICAgICAgcmV0dXJuIHNldENyeXB0b1RvZ2dsZVZpZXcodHJ1ZSk7XFxuICAgIH0sXFxuICAgIG9uTW91c2VMZWF2ZTogZnVuY3Rpb24gb25Nb3VzZUxlYXZlKCkge1xcbiAgICAgIHJldHVybiBzZXRDcnlwdG9Ub2dnbGVWaWV3KGZhbHNlKTtcXG4gICAgfVxcbiAgfSwgdG9nZ2xlVmFsdWUpKSk7XFxufTtcXG5cXG5jcnlwdG9fbW9uZXlfQ3J5cHRvTW9uZXkucHJvcFR5cGVzID0ge1xcbiAgcmVhbFZhbHVlOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5zdHJpbmcsXFxuICB0b2dnbGVWYWx1ZTogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuc3RyaW5nXFxufTtcXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBjcnlwdG9fbW9uZXkgPSAoY3J5cHRvX21vbmV5X0NyeXB0b01vbmV5KTtcXG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vc3JjL2NvbXBvbmVudHMvY3J5cHRvLW1vbmV5L2NyeXB0by1tb25leS5zY3NzXFxudmFyIGNyeXB0b19tb25leV9jcnlwdG9fbW9uZXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQwKTtcXG5cXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb21wb25lbnRzL2NyeXB0by1tb25leS9pbmRleC5qc1xcblxcblxcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIGNvbXBvbmVudHNfY3J5cHRvX21vbmV5ID0gKGNyeXB0b19tb25leSk7XFxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29tcG9uZW50cy9tb25leS9tb25leS5qc3hcXG5cXG5cXG5cXG5cXG5cXG5cXG52YXIgbW9uZXlfTW9uZXkgPSBmdW5jdGlvbiBNb25leShfcmVmKSB7XFxuICB2YXIgYW1vdW50ID0gX3JlZi5hbW91bnQsXFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXFxuICAgICAgX3JlZiRjdXJyZW5jeSA9IF9yZWYuY3VycmVuY3ksXFxuICAgICAgY3VycmVuY3kgPSBfcmVmJGN1cnJlbmN5ID09PSB2b2lkIDAgPyBcXCdVU0RcXCcgOiBfcmVmJGN1cnJlbmN5LFxcbiAgICAgIGhhc19zaWduID0gX3JlZi5oYXNfc2lnbixcXG4gICAgICBfcmVmJHNob3VsZF9mb3JtYXQgPSBfcmVmLnNob3VsZF9mb3JtYXQsXFxuICAgICAgc2hvdWxkX2Zvcm1hdCA9IF9yZWYkc2hvdWxkX2Zvcm1hdCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYkc2hvdWxkX2Zvcm1hdDtcXG4gIHZhciBzaWduID0gXFwnXFwnO1xcblxcbiAgaWYgKCthbW91bnQgJiYgKGFtb3VudCA8IDAgfHwgaGFzX3NpZ24pKSB7XFxuICAgIHNpZ24gPSBhbW91bnQgPiAwID8gXFwnK1xcJyA6IFxcJy1cXCc7XFxuICB9IC8vIGlmIGl0XFwncyBmb3JtYXR0ZWQgYWxyZWFkeSB0aGVuIGRvblxcJ3QgbWFrZSBhbnkgY2hhbmdlcyB1bmxlc3Mgd2Ugc2hvdWxkIHJlbW92ZSBleHRyYSAtLysgc2lnbnNcXG5cXG5cXG4gIHZhciB2YWx1ZSA9IGhhc19zaWduIHx8IHNob3VsZF9mb3JtYXQgPyBNYXRoLmFicyhhbW91bnQpIDogYW1vdW50O1xcbiAgdmFyIGRlY2ltYWxQYXJ0ID0gY3VycmVuY3lfZGVmYXVsdC5hLmdldERlY2ltYWxQYXJ0KGFtb3VudCk7XFxuICB2YXIgbmVlZHNDcnlwdG9Ub2dnbGUgPSBjdXJyZW5jeV9kZWZhdWx0LmEuaXNDcnlwdG9jdXJyZW5jeShjdXJyZW5jeSkgJiYgZGVjaW1hbFBhcnQgJiYgZGVjaW1hbFBhcnQubGVuZ3RoID4gY3VycmVuY3lfZGVmYXVsdC5hLmdldERlY2ltYWxQbGFjZXMoY3VycmVuY3kpO1xcbiAgdmFyIGZpbmFsX2Ftb3VudCA9IG51bGw7XFxuXFxuICBpZiAobmVlZHNDcnlwdG9Ub2dnbGUpIHtcXG4gICAgZmluYWxfYW1vdW50ID0gY3VycmVuY3lfZGVmYXVsdC5hLmdldENyeXB0b0Zvcm1hdCh2YWx1ZSk7XFxuICB9IGVsc2Uge1xcbiAgICBmaW5hbF9hbW91bnQgPSBzaG91bGRfZm9ybWF0ID8gY3VycmVuY3lfZGVmYXVsdC5hLmZvcm1hdE1vbmV5KGN1cnJlbmN5LCB2YWx1ZSwgdHJ1ZSkgOiB2YWx1ZTtcXG4gIH1cXG5cXG4gIHJldHVybiBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuRnJhZ21lbnQsIG51bGwsIGhhc19zaWduICYmIHNpZ24sIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XFxuICAgIGNsYXNzTmFtZTogZXh0ZXJuYWxfY2xhc3NuYW1lc19kZWZhdWx0KCkoY2xhc3NOYW1lLCBcXCdzeW1ib2xzXFwnLCBcInN5bWJvbHMtLVwiLmNvbmNhdChjdXJyZW5jeS50b0xvd2VyQ2FzZSgpKSlcXG4gIH0pLCBuZWVkc0NyeXB0b1RvZ2dsZSA/IGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KGNvbXBvbmVudHNfY3J5cHRvX21vbmV5LCBmaW5hbF9hbW91bnQpIDogZmluYWxfYW1vdW50KTtcXG59O1xcblxcbm1vbmV5X01vbmV5LnByb3BUeXBlcyA9IHtcXG4gIGFtb3VudDogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEub25lT2ZUeXBlKFtleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5udW1iZXIsIGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZ10pLFxcbiAgY2xhc3NOYW1lOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5zdHJpbmcsXFxuICBjdXJyZW5jeTogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuc3RyaW5nLFxcbiAgaGFzX3NpZ246IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLmJvb2wsXFxuICBzaG91bGRfZm9ybWF0OiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5ib29sXFxufTtcXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBtb25leSA9IChtb25leV9Nb25leSk7XFxuLy8gRVhURVJOQUwgTU9EVUxFOiAuL3NyYy9jb21wb25lbnRzL21vbmV5L21vbmV5LnNjc3NcXG52YXIgbW9uZXlfbW9uZXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxKTtcXG5cXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb21wb25lbnRzL21vbmV5L2luZGV4LmpzXFxuXFxuXFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgY29tcG9uZW50c19tb25leSA9IF9fd2VicGFja19leHBvcnRzX19bXCJkZWZhdWx0XCJdID0gKG1vbmV5KTsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lOVFF1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTlBWkdWeWFYWXZZMjl0Y0c5dVpXNTBMeTR2YzNKakwyTnZiWEJ2Ym1WdWRITXZZM0o1Y0hSdkxXMXZibVY1TDJOeWVYQjBieTF0YjI1bGVTNXFjM2cvTkRka01TSXNJbmRsWW5CaFkyczZMeTlBWkdWeWFYWXZZMjl0Y0c5dVpXNTBMeTR2YzNKakwyTnZiWEJ2Ym1WdWRITXZZM0o1Y0hSdkxXMXZibVY1TDJsdVpHVjRMbXB6UHpJMllqa2lMQ0ozWldKd1lXTnJPaTh2UUdSbGNtbDJMMk52YlhCdmJtVnVkQzh1TDNOeVl5OWpiMjF3YjI1bGJuUnpMMjF2Ym1WNUwyMXZibVY1TG1wemVEOWtNbUptSWl3aWQyVmljR0ZqYXpvdkwwQmtaWEpwZGk5amIyMXdiMjVsYm5RdkxpOXpjbU12WTI5dGNHOXVaVzUwY3k5dGIyNWxlUzlwYm1SbGVDNXFjejlsTWpBNUlsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQlFjbTl3Vkhsd1pYTWdabkp2YlNBbmNISnZjQzEwZVhCbGN5YzdYRzVwYlhCdmNuUWdVbVZoWTNRc0lIc2dkWE5sVTNSaGRHVWdmU0JtY205dElDZHlaV0ZqZENjN1hHNXBiWEJ2Y25RZ1VHOXdiM1psY2lCbWNtOXRJQ2N1TGk5d2IzQnZkbVZ5Snp0Y2JseHVZMjl1YzNRZ1EzSjVjSFJ2VFc5dVpYa2dQU0FvZTF4dUlDQWdJSEpsWVd4V1lXeDFaU3hjYmlBZ0lDQjBiMmRuYkdWV1lXeDFaU3hjYm4wcElEMCtJSHRjYmlBZ0lDQmNiaUFnSUNCamIyNXpkQ0JiWTNKNWNIUnZWRzluWjJ4bFZtbGxkeXdnYzJWMFEzSjVjSFJ2Vkc5bloyeGxWbWxsZDEwZ1BTQjFjMlZUZEdGMFpTaG1ZV3h6WlNrN1hHNWNiaUFnSUNCeVpYUjFjbTRnS0Z4dUlDQWdJQ0FnSUNBOFBseHVJQ0FnSUNBZ0lDQWdJQ0FnUEZCdmNHOTJaWEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoYkdsbmJtMWxiblE5SjNSdmNDZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTlKMk55ZVhCMGJ5MXdiM0J2ZG1WeUoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWxjM05oWjJVOWUzSmxZV3hXWVd4MVpYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBjMTl2Y0dWdVBYdGpjbmx3ZEc5VWIyZG5iR1ZXYVdWM2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnBjMkZpYkdWZmRHRnlaMlYwWDJsamIyNWNiaUFnSUNBZ0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGMzQmhiaUJ2YmsxdmRYTmxSVzUwWlhJOWV5Z3BJRDArSUhObGRFTnllWEIwYjFSdloyZHNaVlpwWlhjb2RISjFaU2w5SUc5dVRXOTFjMlZNWldGMlpUMTdLQ2tnUFQ0Z2MyVjBRM0o1Y0hSdlZHOW5aMnhsVm1sbGR5aG1ZV3h6WlNsOVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3ZEc5bloyeGxWbUZzZFdWOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BDOXpjR0Z1UGx4dUlDQWdJQ0FnSUNBZ0lDQWdQQzlRYjNCdmRtVnlQbHh1SUNBZ0lDQWdJQ0E4THo1Y2JpQWdJQ0FwTzF4dWZUdGNibHh1UTNKNWNIUnZUVzl1WlhrdWNISnZjRlI1Y0dWeklEMGdlMXh1SUNBZ0lISmxZV3hXWVd4MVpTQWdPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBZ0lIUnZaMmRzWlZaaGJIVmxPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1ZlR0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1EzSjVjSFJ2VFc5dVpYazdYRzRpTENKcGJYQnZjblFnUTNKNWNIUnZUVzl1WlhrZ1puSnZiU0FuTGk5amNubHdkRzh0Ylc5dVpYa3Vhbk40Snp0Y2JtbHRjRzl5ZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNjdUwyTnllWEIwYnkxdGIyNWxlUzV6WTNOekp6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdRM0o1Y0hSdlRXOXVaWGs3WEc0aUxDSnBiWEJ2Y25RZ1kyeGhjM05PWVcxbGN5Qm1jbTl0SUNkamJHRnpjMjVoYldWekp6dGNibWx0Y0c5eWRDQlFjbTl3Vkhsd1pYTWdabkp2YlNBbmNISnZjQzEwZVhCbGN5YzdYRzVwYlhCdmNuUWdVbVZoWTNRZ1puSnZiU0FuY21WaFkzUW5PMXh1YVcxd2IzSjBJRU4xY25KbGJtTjVWWFJwYkhNZ1puSnZiU0FuUUdSbGNtbDJMM05vWVhKbFpDOTFkR2xzY3k5amRYSnlaVzVqZVNjN1hHNXBiWEJ2Y25RZ1EzSjVjSFJ2VFc5dVpYa2dabkp2YlNBbkxpNHZZM0o1Y0hSdkxXMXZibVY1Snp0Y2JseHVZMjl1YzNRZ1RXOXVaWGtnUFNBb2UxeHVJQ0FnSUdGdGIzVnVkQ3hjYmlBZ0lDQmpiR0Z6YzA1aGJXVXNYRzRnSUNBZ1kzVnljbVZ1WTNrZ1BTQW5WVk5FSnl4Y2JpQWdJQ0JvWVhOZmMybG5iaXhjYmlBZ0lDQnphRzkxYkdSZlptOXliV0YwSUQwZ2RISjFaU3hjYm4wcElEMCtJSHRjYmlBZ0lDQnNaWFFnYzJsbmJpQTlJQ2NuTzF4dUlDQWdJR2xtSUNncllXMXZkVzUwSUNZbUlDaGhiVzkxYm5RZ1BDQXdJSHg4SUdoaGMxOXphV2R1S1NrZ2UxeHVJQ0FnSUNBZ0lDQnphV2R1SUQwZ1lXMXZkVzUwSUQ0Z01DQS9JQ2NySnlBNklDY3RKenRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJwWmlCcGRDZHpJR1p2Y20xaGRIUmxaQ0JoYkhKbFlXUjVJSFJvWlc0Z1pHOXVKM1FnYldGclpTQmhibmtnWTJoaGJtZGxjeUIxYm14bGMzTWdkMlVnYzJodmRXeGtJSEpsYlc5MlpTQmxlSFJ5WVNBdEx5c2djMmxuYm5OY2JpQWdJQ0JqYjI1emRDQjJZV3gxWlNBOUlDaG9ZWE5mYzJsbmJpQjhmQ0J6YUc5MWJHUmZabTl5YldGMEtTQS9JRTFoZEdndVlXSnpLR0Z0YjNWdWRDa2dPaUJoYlc5MWJuUTdYRzRnSUNBZ1kyOXVjM1FnWkdWamFXMWhiRkJoY25RZ1BTQkRkWEp5Wlc1amVWVjBhV3h6TG1kbGRFUmxZMmx0WVd4UVlYSjBLR0Z0YjNWdWRDazdYRzRnSUNBZ1kyOXVjM1FnYm1WbFpITkRjbmx3ZEc5VWIyZG5iR1VnUFNCRGRYSnlaVzVqZVZWMGFXeHpMbWx6UTNKNWNIUnZZM1Z5Y21WdVkza29ZM1Z5Y21WdVkza3BJQ1ltWEc0Z0lDQWdJQ0FnSUNoa1pXTnBiV0ZzVUdGeWRDQW1KaUJrWldOcGJXRnNVR0Z5ZEM1c1pXNW5kR2dnUGlCRGRYSnlaVzVqZVZWMGFXeHpMbWRsZEVSbFkybHRZV3hRYkdGalpYTW9ZM1Z5Y21WdVkza3BLVHRjYmlBZ0lDQnNaWFFnWm1sdVlXeGZZVzF2ZFc1MElEMGdiblZzYkR0Y2JpQWdJQ0JwWmlBb2JtVmxaSE5EY25sd2RHOVViMmRuYkdVcElIdGNiaUFnSUNBZ0lDQWdabWx1WVd4ZllXMXZkVzUwSUQwZ1EzVnljbVZ1WTNsVmRHbHNjeTVuWlhSRGNubHdkRzlHYjNKdFlYUW9kbUZzZFdVcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUdacGJtRnNYMkZ0YjNWdWRDQTlJSE5vYjNWc1pGOW1iM0p0WVhRZ1B5QkRkWEp5Wlc1amVWVjBhV3h6TG1admNtMWhkRTF2Ym1WNUtHTjFjbkpsYm1ONUxDQjJZV3gxWlN3Z2RISjFaU2tnT2lCMllXeDFaVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUNoY2JpQWdJQ0FnSUNBZ1BGSmxZV04wTGtaeVlXZHRaVzUwUGx4dUlDQWdJQ0FnSUNBZ0lDQWdlMmhoYzE5emFXZHVJQ1ltSUhOcFoyNTlYRzRnSUNBZ0lDQWdJQ0FnSUNBOGMzQmhibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05zWVhOelRtRnRaVDE3WTJ4aGMzTk9ZVzFsY3loamJHRnpjMDVoYldVc0lDZHplVzFpYjJ4ekp5d2dZSE41YldKdmJITXRMU1I3WTNWeWNtVnVZM2t1ZEc5TWIzZGxja05oYzJVb0tYMWdLWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDOCtYRzRnSUNBZ0lDQWdJQ0FnSUNCN2JtVmxaSE5EY25sd2RHOVViMmRuYkdVZ1B5QThRM0o1Y0hSdlRXOXVaWGtnZXk0dUxtWnBibUZzWDJGdGIzVnVkSDBnTHo0Z09pQm1hVzVoYkY5aGJXOTFiblI5WEc0Z0lDQWdJQ0FnSUR3dlVtVmhZM1F1Um5KaFoyMWxiblErWEc0Z0lDQWdLVHRjYm4wN1hHNWNiazF2Ym1WNUxuQnliM0JVZVhCbGN5QTlJSHRjYmlBZ0lDQmhiVzkxYm5RNklGQnliM0JVZVhCbGN5NXZibVZQWmxSNWNHVW9XMXh1SUNBZ0lDQWdJQ0JRY205d1ZIbHdaWE11Ym5WdFltVnlMRnh1SUNBZ0lDQWdJQ0JRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBZ0lGMHBMRnh1SUNBZ0lHTnNZWE56VG1GdFpTQWdJQ0E2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdZM1Z5Y21WdVkza2dJQ0FnSURvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0JvWVhOZmMybG5iaUFnSUNBZ09pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdJQ0J6YUc5MWJHUmZabTl5YldGME9pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JuMDdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRTF2Ym1WNU8xeHVJaXdpYVcxd2IzSjBJRTF2Ym1WNUlHWnliMjBnSnk0dmJXOXVaWGt1YW5ONEp6dGNibWx0Y0c5eWRDQWdJQ0FnSUNBZ0lDQWdJQ2N1TDIxdmJtVjVMbk5qYzNNbk8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQk5iMjVsZVR0Y2JpSmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVZEJPMEZCUVVFN1FVRkRRVHRCUVVSQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZIUVR0QlFVZEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGTVFUdEJRVTlCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJUVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVWkJPMEZCUzBFN096czdPMEZEYWtOQk8wRkJRMEU3UVVGRlFUczdRVU5JUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVTFCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRlFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGSlFUdEJRVVJCTzBGQlRVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkpRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVkpCTzBGQlYwRTdPenM3TzBGRGJrUkJPMEZCUTBFN1FVRkZRU0lzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzU0XFxuJyl9LDg6ZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMpe2V2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzhfXzsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lPQzVxY3lJc0luTnZkWEpqWlhNaU9sc2lkMlZpY0dGamF6b3ZMMEJrWlhKcGRpOWpiMjF3YjI1bGJuUXZaWGgwWlhKdVlXd2dYQ0p5WldGamRDMTBhVzU1TFhCdmNHOTJaWEpjSWo4M05ERXhJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWDE5WFJVSlFRVU5MWDBWWVZFVlNUa0ZNWDAxUFJGVk1SVjlmT0Y5Zk95SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vOFxcblwiKX19KS5kZWZhdWx0fSk7Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../components/lib/money.js\n");

/***/ })

}]);